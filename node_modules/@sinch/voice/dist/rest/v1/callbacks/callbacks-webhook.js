"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VoiceCallbackWebhooks = void 0;
const sdk_client_1 = require("@sinch/sdk-client");
class VoiceCallbackWebhooks {
    constructor(sinchClientParameters) {
        this.sinchClientParameters = sinchClientParameters;
    }
    /**
     * Validate authorization header for callback request
     * @param {IncomingHttpHeaders} headers - Incoming request's headers
     * @param {any} body - Incoming request's body
     * @param {string} path - Incoming request's path
     * @param {string} method - Incoming request's HTTP method
     * @return {boolean} - true if the authorization header is valid
     */
    validateAuthenticationHeader(headers, body, path, method) {
        if (!this.sinchClientParameters.applicationKey || !this.sinchClientParameters.applicationSecret) {
            throw new Error('The application key and secret must be defined');
        }
        return (0, sdk_client_1.validateAuthenticationHeader)(this.sinchClientParameters.applicationKey, this.sinchClientParameters.applicationSecret, headers, body, path, method);
    }
    /**
     * Reviver for a Voice Event.
     * This method ensures the object can be treated as a Voice Event and should be called before any action is taken to manipulate the object.
     * @param {any} eventBody - The event body containing the voice event notification.
     * @return {VoiceCallback} - The parsed voice event object.
     */
    parseEvent(eventBody) {
        if (eventBody.timestamp) {
            eventBody.timestamp = new Date(eventBody.timestamp);
        }
        if (eventBody.event) {
            switch (eventBody.event) {
                case 'ice':
                    return eventBody;
                case 'ace':
                    return eventBody;
                case 'dice':
                    return eventBody;
                case 'pie':
                    return eventBody;
                case 'notify':
                    return eventBody;
                default:
                    throw new Error(`Unknown Voice event type: ${eventBody.event}`);
            }
        }
        console.log(eventBody);
        throw new Error('Unknown Voice event');
    }
}
exports.VoiceCallbackWebhooks = VoiceCallbackWebhooks;
//# sourceMappingURL=callbacks-webhook.js.map