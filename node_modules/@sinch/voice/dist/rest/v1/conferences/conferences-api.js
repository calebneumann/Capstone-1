"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConferencesApi = void 0;
const voice_domain_api_1 = require("../voice-domain-api");
const callouts_1 = require("../callouts");
class ConferencesApi extends voice_domain_api_1.VoiceDomainApi {
    /**
     * Initialize your interface
     *
     * @param {SinchClientParameters} sinchClientParameters - The parameters used to initialize the API Client.
     */
    constructor(sinchClientParameters) {
        super(sinchClientParameters, 'ConferencesApi');
        this.calloutApi = new callouts_1.CalloutsApi(sinchClientParameters);
    }
    /**
     * Conference Callout Request
     * Makes a conference callout to a phone number.
     * @param { ConferenceCalloutRequestData } data - The data to provide to the API call.
     */
    async call(data) {
        return this.calloutApi.conference(data);
    }
    /**
     * Get Conference Info
     * Returns information about a conference that matches the provided conference ID.
     * @param { GetConferenceInfoRequestData } data - The data to provide to the API call.
     */
    async get(data) {
        this.client = this.getSinchClient();
        const getParams = this.client.extractQueryParams(data, []);
        const headers = {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
        };
        const body = '';
        const path = `/calling/v1/conferences/id/${data['conferenceId']}`;
        const basePathUrl = this.client.apiClientOptions.hostname + path;
        const requestOptions = await this.client.prepareOptions(basePathUrl, 'GET', getParams, headers, body || undefined, path);
        const url = this.client.prepareUrl(requestOptions.hostname, requestOptions.queryParams);
        return this.client.processCall({
            url,
            requestOptions,
            apiName: this.apiName,
            operationId: 'GetConferenceInfo',
        });
    }
    /**
     * Kick Conference All
     * Removes all participants from a conference.
     * @param { KickAllRequestData } data - The data to provide to the API call.
     */
    async kickAll(data) {
        this.client = this.getSinchClient();
        const getParams = this.client.extractQueryParams(data, []);
        const headers = {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
        };
        const body = '';
        const path = `/calling/v1/conferences/id/${data['conferenceId']}`;
        const basePathUrl = this.client.apiClientOptions.hostname + path;
        const requestOptions = await this.client.prepareOptions(basePathUrl, 'DELETE', getParams, headers, body, path);
        const url = this.client.prepareUrl(requestOptions.hostname, requestOptions.queryParams);
        return this.client.processCall({
            url,
            requestOptions,
            apiName: this.apiName,
            operationId: 'KickConferenceAll',
        });
    }
    /**
     * Kick Conference Participant
     * Remove a specified conference participant from a specified conference.
     * @param { KickParticipantRequestData } data - The data to provide to the API call.
     */
    async kickParticipant(data) {
        this.client = this.getSinchClient();
        const getParams = this.client.extractQueryParams(data, []);
        const headers = {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
        };
        const body = '';
        const path = `/calling/v1/conferences/id/${data['conferenceId']}/${data['callId']}`;
        const basePathUrl = this.client.apiClientOptions.hostname + path;
        const requestOptions = await this.client.prepareOptions(basePathUrl, 'DELETE', getParams, headers, body, path);
        const url = this.client.prepareUrl(requestOptions.hostname, requestOptions.queryParams);
        return this.client.processCall({
            url,
            requestOptions,
            apiName: this.apiName,
            operationId: 'KickConferenceParticipant',
        });
    }
    /**
     * Manage Conference Participant
     * Manages conference participant in a specified conference: * mute / unmute * put on hold / resume.
     * @param { ManageParticipantRequestData } data - The data to provide to the API call.
     */
    async manageParticipant(data) {
        this.client = this.getSinchClient();
        const getParams = this.client.extractQueryParams(data, []);
        const headers = {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
        };
        const body = data['manageParticipantRequestBody']
            ? JSON.stringify(data['manageParticipantRequestBody']) : '{}';
        const path = `/calling/v1/conferences/id/${data['conferenceId']}/${data['callId']}`;
        const basePathUrl = this.client.apiClientOptions.hostname + path;
        const requestOptions = await this.client.prepareOptions(basePathUrl, 'PATCH', getParams, headers, body, path);
        const url = this.client.prepareUrl(requestOptions.hostname, requestOptions.queryParams);
        return this.client.processCall({
            url,
            requestOptions,
            apiName: this.apiName,
            operationId: 'ManageConferenceParticipant',
        });
    }
}
exports.ConferencesApi = ConferencesApi;
//# sourceMappingURL=conferences-api.js.map