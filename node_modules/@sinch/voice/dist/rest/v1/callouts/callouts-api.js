"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CalloutsApi = void 0;
const voice_domain_api_1 = require("../voice-domain-api");
class CalloutsApi extends voice_domain_api_1.VoiceDomainApi {
    /**
     * Initialize your interface
     *
     * @param {SinchClientParameters} sinchClientParameters - The parameters used to initialize the API Client.
     */
    constructor(sinchClientParameters) {
        super(sinchClientParameters, 'CalloutsApi');
    }
    /**
     * TTS Callout Request
     * Makes a text-to-speech callout to a phone number.
     * @param { TtsCalloutRequestData } data - The data to provide to the API call.
     */
    async tts(data) {
        this.client = this.getSinchClient();
        const getParams = this.client.extractQueryParams(data, []);
        const headers = {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
        };
        const body = data['ttsCalloutRequestBody'] ? JSON.stringify(data['ttsCalloutRequestBody']) : '{}';
        const path = '/calling/v1/callouts';
        const basePathUrl = this.client.apiClientOptions.hostname + path;
        const requestOptions = await this.client.prepareOptions(basePathUrl, 'POST', getParams, headers, body, path);
        const url = this.client.prepareUrl(requestOptions.hostname, requestOptions.queryParams);
        return this.client.processCall({
            url,
            requestOptions,
            apiName: this.apiName,
            operationId: 'TtsCallouts',
        });
    }
    /**
     * Conference Callout Request
     * Makes a conference callout to a phone number.
     * @param { ConferenceCalloutRequestData } data - The data to provide to the API call.
     */
    async conference(data) {
        this.client = this.getSinchClient();
        const getParams = this.client.extractQueryParams(data, []);
        const headers = {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
        };
        const body = data['conferenceCalloutRequestBody'] ? JSON.stringify(data['conferenceCalloutRequestBody']) : '{}';
        const path = '/calling/v1/callouts';
        const basePathUrl = this.client.apiClientOptions.hostname + path;
        const requestOptions = await this.client.prepareOptions(basePathUrl, 'POST', getParams, headers, body, path);
        const url = this.client.prepareUrl(requestOptions.hostname, requestOptions.queryParams);
        return this.client.processCall({
            url,
            requestOptions,
            apiName: this.apiName,
            operationId: 'ConferenceCallouts',
        });
    }
    /**
     * Custom Callout Request
     * Makes a conference callout to a phone number.
     * @param { CustomCalloutRequestData } data - The data to provide to the API call.
     */
    async custom(data) {
        this.client = this.getSinchClient();
        const getParams = this.client.extractQueryParams(data, []);
        const headers = {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
        };
        const body = data['customCalloutRequestBody'] ? JSON.stringify(data['customCalloutRequestBody']) : '{}';
        const path = '/calling/v1/callouts';
        const basePathUrl = this.client.apiClientOptions.hostname + path;
        const requestOptions = await this.client.prepareOptions(basePathUrl, 'POST', getParams, headers, body, path);
        const url = this.client.prepareUrl(requestOptions.hostname, requestOptions.queryParams);
        return this.client.processCall({
            url,
            requestOptions,
            apiName: this.apiName,
            operationId: 'CustomCallouts',
        });
    }
}
exports.CalloutsApi = CalloutsApi;
//# sourceMappingURL=callouts-api.js.map