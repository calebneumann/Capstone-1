"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApplicationsApi = void 0;
const voice_domain_api_1 = require("../voice-domain-api");
class ApplicationsApi extends voice_domain_api_1.VoiceDomainApi {
    /**
     * Initialize your interface
     *
     * @param {SinchClientParameters} sinchClientParameters - The parameters used to initialize the API Client.
     */
    constructor(sinchClientParameters) {
        super(sinchClientParameters, 'ApplicationsApi');
    }
    /**
     * Query number
     * Returns information about the requested number.
     * @param { QueryNumberRequestData } data - The data to provide to the API call.
     */
    async queryNumber(data) {
        this.client = this.getSinchClient();
        const getParams = this.client.extractQueryParams(data, []);
        const headers = {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
        };
        const body = '';
        // Remove the spaces in the phone number in order to not have inconsistencies in the way the URL is encoded in the SDK and server side when calculating the request signature
        const path = `/v1/calling/query/number/${data['number'].split(' ').join('')}`;
        const basePathUrl = this.client.apiClientOptions.hostname + path;
        const requestOptions = await this.client.prepareOptions(basePathUrl, 'GET', getParams, headers, body || undefined, path);
        const url = this.client.prepareUrl(requestOptions.hostname, requestOptions.queryParams);
        return this.client.processCall({
            url,
            requestOptions,
            apiName: this.apiName,
            operationId: 'QueryNumber',
        });
    }
    /**
     * Get Callback URLs
     * Returns any callback URLs configured for the specified application.
     * @param { GetCallbackURLsRequestData } data - The data to provide to the API call.
     */
    async getCallbackURLs(data) {
        this.client = this.getSinchClient();
        const getParams = this.client.extractQueryParams(data, []);
        const headers = {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
        };
        const body = '';
        const path = `/v1/configuration/callbacks/applications/${data['applicationkey']}`;
        const basePathUrl = this.client.apiClientOptions.hostname + path;
        const requestOptions = await this.client.prepareOptions(basePathUrl, 'GET', getParams, headers, body || undefined, path);
        const url = this.client.prepareUrl(requestOptions.hostname, requestOptions.queryParams);
        return this.client.processCall({
            url,
            requestOptions,
            apiName: this.apiName,
            operationId: 'GetCallbackURLs',
        });
    }
    /**
     * Get Numbers
     * Get information about your numbers. It returns a list of numbers that you own, as well as their capability (voice or SMS). For the ones that are assigned to an app, it returns the application key of the app.
     * @param { GetNumbersRequestData } data - The data to provide to the API call.
     */
    async listNumbers(data) {
        this.client = this.getSinchClient();
        const getParams = this.client.extractQueryParams(data, []);
        const headers = {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
        };
        const body = '';
        const path = '/v1/configuration/numbers';
        const basePathUrl = this.client.apiClientOptions.hostname + path;
        const requestOptions = await this.client.prepareOptions(basePathUrl, 'GET', getParams, headers, body || undefined, path);
        const url = this.client.prepareUrl(requestOptions.hostname, requestOptions.queryParams);
        return this.client.processCall({
            url,
            requestOptions,
            apiName: this.apiName,
            operationId: 'GetNumbers',
        });
    }
    /**
     * Un-assign number
     * Un-assign a number from an application.
     * @param { UnassignNumberRequestData } data - The data to provide to the API call.
     */
    async unassignNumber(data) {
        this.client = this.getSinchClient();
        const getParams = this.client.extractQueryParams(data, []);
        const headers = {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
        };
        const body = data['unassignNumbersRequestBody']
            ? JSON.stringify(data['unassignNumbersRequestBody']) : '{}';
        const path = '/v1/configuration/numbers';
        const basePathUrl = this.client.apiClientOptions.hostname + path;
        const requestOptions = await this.client.prepareOptions(basePathUrl, 'DELETE', getParams, headers, body || undefined, path);
        const url = this.client.prepareUrl(requestOptions.hostname, requestOptions.queryParams);
        return this.client.processCall({
            url,
            requestOptions,
            apiName: this.apiName,
            operationId: 'UnassignNumber',
        });
    }
    /**
     * Update Callbacks
     * Update the configured callback URLs for the specified application.
     * @param { UpdateCallbackURLsRequestData } data - The data to provide to the API call.
     */
    async updateCallbackURLs(data) {
        this.client = this.getSinchClient();
        const getParams = this.client.extractQueryParams(data, []);
        const headers = {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
        };
        const body = data['updateCallbacksRequestBody']
            ? JSON.stringify(data['updateCallbacksRequestBody']) : '{}';
        const path = `/v1/configuration/callbacks/applications/${data['applicationkey']}`;
        const basePathUrl = this.client.apiClientOptions.hostname + path;
        const requestOptions = await this.client.prepareOptions(basePathUrl, 'POST', getParams, headers, body || undefined, path);
        const url = this.client.prepareUrl(requestOptions.hostname, requestOptions.queryParams);
        return this.client.processCall({
            url,
            requestOptions,
            apiName: this.apiName,
            operationId: 'UpdateCallbackURLs',
        });
    }
    /**
     * Update Numbers
     * Assign a number or a list of numbers to an application.
     * @param { AssignNumbersRequestData } data - The data to provide to the API call.
     */
    async assignNumbers(data) {
        this.client = this.getSinchClient();
        const getParams = this.client.extractQueryParams(data, []);
        const headers = {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
        };
        const body = data['assignNumbersRequestBody']
            ? JSON.stringify(data['assignNumbersRequestBody']) : '{}';
        const path = '/v1/configuration/numbers';
        const basePathUrl = this.client.apiClientOptions.hostname + path;
        const requestOptions = await this.client.prepareOptions(basePathUrl, 'POST', getParams, headers, body || undefined, path);
        const url = this.client.prepareUrl(requestOptions.hostname, requestOptions.queryParams);
        return this.client.processCall({
            url,
            requestOptions,
            apiName: this.apiName,
            operationId: 'UpdateNumbers',
        });
    }
}
exports.ApplicationsApi = ApplicationsApi;
//# sourceMappingURL=applications-api.js.map