"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.pieInstructionHelper = exports.pieActionHelper = exports.iceInstructionHelper = exports.iceActionHelper = exports.aceInstructionHelper = exports.aceActionHelper = exports.svamlInstructionHelper = exports.svamlActionHelper = exports.customCalloutHelper = exports.PieSvamletBuilder = exports.IceSvamletBuilder = exports.AceSvamletBuilder = void 0;
class SvamletBuilder {
    constructor() {
        this.setAction = (action) => {
            this.action = action;
            return this;
        };
        this.addInstruction = (instruction) => {
            if (!this.instructions) {
                this.instructions = [];
            }
            this.instructions.push(instruction);
            return this;
        };
        this.build = () => {
            return {
                action: this.action,
                instructions: this.instructions,
            };
        };
    }
}
class AceSvamletBuilder extends SvamletBuilder {
}
exports.AceSvamletBuilder = AceSvamletBuilder;
class IceSvamletBuilder extends SvamletBuilder {
}
exports.IceSvamletBuilder = IceSvamletBuilder;
class PieSvamletBuilder extends SvamletBuilder {
}
exports.PieSvamletBuilder = PieSvamletBuilder;
exports.customCalloutHelper = {
    formatIceResponse: (action, ...instructions) => {
        const iceResponse = {
            action,
            instructions: instructions.length > 0 ? instructions : undefined,
        };
        return JSON.stringify(iceResponse);
    },
    formatAceResponse: (action, ...instructions) => {
        const aceResponse = {
            action,
            instructions: instructions.length > 0 ? instructions : undefined,
        };
        return JSON.stringify(aceResponse);
    },
    formatPieResponse: (action, ...instructions) => {
        const pieResponse = {
            action,
            instructions: instructions.length > 0 ? instructions : undefined,
        };
        return JSON.stringify(pieResponse);
    },
};
exports.svamlActionHelper = {
    buildConnectConf: (connectConfProps) => {
        return {
            name: 'connectConf',
            ...connectConfProps,
        };
    },
    buildConnectMxp: (connectMxpProps) => {
        return {
            name: 'connectMxp',
            ...connectMxpProps,
        };
    },
    buildConnectPstn: (connectPstnProps) => {
        return {
            name: 'connectPstn',
            ...connectPstnProps,
        };
    },
    buildConnectSip: (connectSipProps) => {
        return {
            name: 'connectSip',
            ...connectSipProps,
        };
    },
    buildContinue: () => {
        return {
            name: 'continue',
        };
    },
    buildHangup: () => {
        return {
            name: 'hangup',
        };
    },
    buildPark: (parkProps) => {
        return {
            name: 'park',
            ...parkProps,
        };
    },
    buildRunMenu: (runMenuProps) => {
        return {
            name: 'runMenu',
            ...runMenuProps,
        };
    },
};
exports.svamlInstructionHelper = {
    buildAnswer: () => {
        return {
            name: 'answer',
        };
    },
    buildPlayFiles: (ids, locale) => {
        // TODO - check for server limitations
        return {
            name: 'playFiles',
            ids,
            locale,
        };
    },
    buildSay: (text, locale) => {
        return {
            name: 'say',
            text,
            locale,
        };
    },
    buildSendDtmf: (dtmfValue) => {
        const dtmfRegex = /^[0-9#w]+$/;
        if (!dtmfRegex.test(dtmfValue)) {
            console.error(`The DTMF value '${dtmfValue}' is incorrect. Valid characters are: 0-9, #, and w.`);
        }
        return {
            name: 'sendDtmf',
            value: dtmfValue,
        };
    },
    buildSetCookie: (name, value) => {
        return {
            name: 'setCookie',
            key: name,
            value,
        };
    },
    buildStartRecording: (startRecordingOptions) => {
        return {
            name: 'startRecording',
            options: {
                ...startRecordingOptions,
            },
        };
    },
    buildStopRecording: () => {
        return {
            name: 'stopRecording',
        };
    },
};
exports.aceActionHelper = {
    hangup: exports.svamlActionHelper.buildHangup,
    continue: exports.svamlActionHelper.buildContinue,
    connectConf: exports.svamlActionHelper.buildConnectConf,
    runMenu: exports.svamlActionHelper.buildRunMenu,
};
exports.aceInstructionHelper = {
    playFiles: exports.svamlInstructionHelper.buildPlayFiles,
    say: exports.svamlInstructionHelper.buildSay,
    setCookie: exports.svamlInstructionHelper.buildSetCookie,
    startRecording: exports.svamlInstructionHelper.buildStartRecording,
};
exports.iceActionHelper = {
    hangup: exports.svamlActionHelper.buildHangup,
    connectPstn: exports.svamlActionHelper.buildConnectPstn,
    connectMxp: exports.svamlActionHelper.buildConnectMxp,
    connectConf: exports.svamlActionHelper.buildConnectConf,
    connectSip: exports.svamlActionHelper.buildConnectSip,
    runMenu: exports.svamlActionHelper.buildRunMenu,
    park: exports.svamlActionHelper.buildPark,
};
exports.iceInstructionHelper = {
    playFiles: exports.svamlInstructionHelper.buildPlayFiles,
    say: exports.svamlInstructionHelper.buildSay,
    sendDtmf: exports.svamlInstructionHelper.buildSendDtmf,
    setCookie: exports.svamlInstructionHelper.buildSetCookie,
    startRecording: exports.svamlInstructionHelper.buildStartRecording,
    answer: exports.svamlInstructionHelper.buildAnswer,
};
exports.pieActionHelper = {
    hangup: exports.svamlActionHelper.buildHangup,
    continue: exports.svamlActionHelper.buildContinue,
    connectConf: exports.svamlActionHelper.buildConnectConf,
    connectSip: exports.svamlActionHelper.buildConnectSip,
    runMenu: exports.svamlActionHelper.buildRunMenu,
};
exports.pieInstructionHelper = {
    playFiles: exports.svamlInstructionHelper.buildPlayFiles,
    say: exports.svamlInstructionHelper.buildSay,
    sendDtmf: exports.svamlInstructionHelper.buildSendDtmf,
    setCookie: exports.svamlInstructionHelper.buildSetCookie,
    startRecording: exports.svamlInstructionHelper.buildStartRecording,
    stopRecording: exports.svamlInstructionHelper.buildStopRecording,
};
//# sourceMappingURL=helper.js.map