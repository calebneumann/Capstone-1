import { ConnectConfProps, ConnectMxpProps, ConnectPstnProps, ConnectSipProps, ParkProps, RunMenuProps, StartRecordingOptions, SvamlActionConnectConf, SvamlActionConnectMxp, SvamlActionConnectPstn, SvamlActionConnectSip, SvamlActionContinue, SvamlActionHangup, SvamlActionPark, SvamlActionRunMenu, SvamlInstructionAnswer, SvamlInstructionPlayFiles, SvamlInstructionSay, SvamlInstructionSendDtmf, SvamlInstructionSetCookie, SvamlInstructionStartRecording, SvamlInstructionStopRecording } from './mod-svaml';
import { AceResponse, AceSvamlAction, AceSvamlInstruction, CallbackResponse, IceResponse, IceSvamlAction, IceSvamlInstruction, PieResponse, PieSvamlAction, PieSvamlInstruction } from './mod-callbacks';
import { TtsVoice } from './enums';
declare class SvamletBuilder<A, I, R extends CallbackResponse<A, I>> {
    protected action: A | undefined;
    protected instructions: I[] | undefined;
    setAction: (action: A) => this;
    addInstruction: (instruction: I) => this;
    build: () => R;
}
export declare class AceSvamletBuilder extends SvamletBuilder<AceSvamlAction, AceSvamlInstruction, AceResponse> {
}
export declare class IceSvamletBuilder extends SvamletBuilder<IceSvamlAction, IceSvamlInstruction, IceResponse> {
}
export declare class PieSvamletBuilder extends SvamletBuilder<PieSvamlAction, PieSvamlInstruction, PieResponse> {
}
export declare const customCalloutHelper: {
    formatIceResponse: (action?: IceSvamlAction, ...instructions: IceSvamlInstruction[]) => string;
    formatAceResponse: (action?: AceSvamlAction, ...instructions: AceSvamlInstruction[]) => string;
    formatPieResponse: (action?: PieSvamlAction, ...instructions: PieSvamlInstruction[]) => string;
};
export declare const svamlActionHelper: {
    buildConnectConf: (connectConfProps: ConnectConfProps) => SvamlActionConnectConf;
    buildConnectMxp: (connectMxpProps: ConnectMxpProps) => SvamlActionConnectMxp;
    buildConnectPstn: (connectPstnProps: ConnectPstnProps) => SvamlActionConnectPstn;
    buildConnectSip: (connectSipProps: ConnectSipProps) => SvamlActionConnectSip;
    buildContinue: () => SvamlActionContinue;
    buildHangup: () => SvamlActionHangup;
    buildPark: (parkProps: ParkProps) => SvamlActionPark;
    buildRunMenu: (runMenuProps: RunMenuProps) => SvamlActionRunMenu;
};
export declare const svamlInstructionHelper: {
    buildAnswer: () => SvamlInstructionAnswer;
    buildPlayFiles: (ids: string[], locale?: TtsVoice) => SvamlInstructionPlayFiles;
    buildSay: (text: string, locale?: TtsVoice) => SvamlInstructionSay;
    buildSendDtmf: (dtmfValue: string) => SvamlInstructionSendDtmf;
    buildSetCookie: (name: string, value: string) => SvamlInstructionSetCookie;
    buildStartRecording: (startRecordingOptions: StartRecordingOptions) => SvamlInstructionStartRecording;
    buildStopRecording: () => SvamlInstructionStopRecording;
};
export declare const aceActionHelper: {
    hangup: () => SvamlActionHangup;
    continue: () => SvamlActionContinue;
    connectConf: (connectConfProps: ConnectConfProps) => SvamlActionConnectConf;
    runMenu: (runMenuProps: RunMenuProps) => SvamlActionRunMenu;
};
export declare const aceInstructionHelper: {
    playFiles: (ids: string[], locale?: TtsVoice) => SvamlInstructionPlayFiles;
    say: (text: string, locale?: TtsVoice) => SvamlInstructionSay;
    setCookie: (name: string, value: string) => SvamlInstructionSetCookie;
    startRecording: (startRecordingOptions: StartRecordingOptions) => SvamlInstructionStartRecording;
};
export declare const iceActionHelper: {
    hangup: () => SvamlActionHangup;
    connectPstn: (connectPstnProps: ConnectPstnProps) => SvamlActionConnectPstn;
    connectMxp: (connectMxpProps: ConnectMxpProps) => SvamlActionConnectMxp;
    connectConf: (connectConfProps: ConnectConfProps) => SvamlActionConnectConf;
    connectSip: (connectSipProps: ConnectSipProps) => SvamlActionConnectSip;
    runMenu: (runMenuProps: RunMenuProps) => SvamlActionRunMenu;
    park: (parkProps: ParkProps) => SvamlActionPark;
};
export declare const iceInstructionHelper: {
    playFiles: (ids: string[], locale?: TtsVoice) => SvamlInstructionPlayFiles;
    say: (text: string, locale?: TtsVoice) => SvamlInstructionSay;
    sendDtmf: (dtmfValue: string) => SvamlInstructionSendDtmf;
    setCookie: (name: string, value: string) => SvamlInstructionSetCookie;
    startRecording: (startRecordingOptions: StartRecordingOptions) => SvamlInstructionStartRecording;
    answer: () => SvamlInstructionAnswer;
};
export declare const pieActionHelper: {
    hangup: () => SvamlActionHangup;
    continue: () => SvamlActionContinue;
    connectConf: (connectConfProps: ConnectConfProps) => SvamlActionConnectConf;
    connectSip: (connectSipProps: ConnectSipProps) => SvamlActionConnectSip;
    runMenu: (runMenuProps: RunMenuProps) => SvamlActionRunMenu;
};
export declare const pieInstructionHelper: {
    playFiles: (ids: string[], locale?: TtsVoice) => SvamlInstructionPlayFiles;
    say: (text: string, locale?: TtsVoice) => SvamlInstructionSay;
    sendDtmf: (dtmfValue: string) => SvamlInstructionSendDtmf;
    setCookie: (name: string, value: string) => SvamlInstructionSetCookie;
    startRecording: (startRecordingOptions: StartRecordingOptions) => SvamlInstructionStartRecording;
    stopRecording: () => SvamlInstructionStopRecording;
};
export {};
