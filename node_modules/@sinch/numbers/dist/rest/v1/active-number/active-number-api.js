"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ActiveNumberApi = void 0;
const sdk_client_1 = require("@sinch/sdk-client");
const numbers_domain_api_1 = require("../numbers-domain-api");
class ActiveNumberApi extends numbers_domain_api_1.NumbersDomainApi {
    /**
     * Initialize your interface with the provided API client.
     *
     * @param {SinchClientParameters} sinchClientParameters - The parameters used to initialize the API Client.
     */
    constructor(sinchClientParameters) {
        super(sinchClientParameters, 'ActiveNumberApi');
    }
    /**
     * Get active Number
     * Get a virtual number
    * @param {GetActiveNumberRequestData} data - The data to provide to the API call.
     */
    async get(data) {
        this.client = this.getSinchClient();
        const getParams = this.client.extractQueryParams(data, []);
        const headers = {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
        };
        const body = '';
        const basePathUrl = `${this.client.apiClientOptions.hostname}/v1/projects/${this.client.apiClientOptions.projectId}/activeNumbers/${data['phoneNumber']}`;
        const requestOptions = await this.client.prepareOptions(basePathUrl, 'GET', getParams, headers, body || undefined);
        const url = this.client.prepareUrl(requestOptions.hostname, requestOptions.queryParams);
        return this.client.processCall({
            url,
            requestOptions,
            apiName: this.apiName,
            operationId: 'GetActiveNumber',
        });
    }
    /**
     * List active numbers
     * Lists all virtual numbers for a project.
     * @param {ListActiveNumbersRequestData} data - The data to provide to the API call.
     * @return {ApiListPromise<ActiveNumber>}
     */
    list(data) {
        this.client = this.getSinchClient();
        const getParams = this.client.extractQueryParams(data, [
            'regionCode',
            'numberPattern.pattern',
            'numberPattern.searchPattern',
            'type',
            'capability',
            'pageSize',
            'pageToken',
            'orderBy',
        ]);
        const headers = {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
        };
        const body = '';
        const basePathUrl = `${this.client.apiClientOptions.hostname}/v1/projects/${this.client.apiClientOptions.projectId}/activeNumbers`;
        const requestOptionsPromise = this.client.prepareOptions(basePathUrl, 'GET', getParams, headers, body || undefined);
        const operationProperties = {
            pagination: sdk_client_1.PaginationEnum.TOKEN,
            apiName: this.apiName,
            operationId: 'ListActiveNumbers',
            dataKey: 'activeNumbers',
        };
        // Create the promise containing the response wrapped as a PageResult
        const listPromise = (0, sdk_client_1.buildPageResultPromise)(this.client, requestOptionsPromise, operationProperties);
        // Add properties to the Promise to offer the possibility to use it as an iterator
        Object.assign(listPromise, (0, sdk_client_1.createIteratorMethodsForPagination)(this.client, requestOptionsPromise, listPromise, operationProperties));
        return listPromise;
    }
    /**
     * Release number
     * With this endpoint, you can cancel your subscription for a specific virtual phone number.
     * @param {ReleaseNumberRequestData} data - The data to provide to the API call.
     */
    async release(data) {
        this.client = this.getSinchClient();
        const getParams = this.client.extractQueryParams(data, []);
        const headers = {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
        };
        const body = '';
        const basePathUrl = `${this.client.apiClientOptions.hostname}/v1/projects/${this.client.apiClientOptions.projectId}/activeNumbers/${data['phoneNumber']}:release`;
        const requestOptions = await this.client.prepareOptions(basePathUrl, 'POST', getParams, headers, body || undefined);
        const url = this.client.prepareUrl(requestOptions.hostname, requestOptions.queryParams);
        return this.client.processCall({
            url,
            requestOptions,
            apiName: this.apiName,
            operationId: 'ReleaseNumber',
        });
    }
    /**
     * Update active number
     * Update a virtual phone number. For example: you can configure SMS/Voice services or set a friendly name. To update the name that displays, modify the `displayName` parameter.
     * You'll use `smsConfiguration` to update your SMS configuration and `voiceConfiguration` to update the voice configuration.
     * @param {UpdateActiveNumberRequestData} data - The data to provide to the API call.
     */
    async update(data) {
        this.client = this.getSinchClient();
        const getParams = this.client.extractQueryParams(data, []);
        const headers = {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
        };
        const body = data['updateActiveNumberRequestBody']
            ? JSON.stringify(data['updateActiveNumberRequestBody'])
            : '{}';
        const basePathUrl = `${this.client.apiClientOptions.hostname}/v1/projects/${this.client.apiClientOptions.projectId}/activeNumbers/${data['phoneNumber']}`;
        const requestOptions = await this.client.prepareOptions(basePathUrl, 'PATCH', getParams, headers, body || undefined);
        const url = this.client.prepareUrl(requestOptions.hostname, requestOptions.queryParams);
        return this.client.processCall({
            url,
            requestOptions,
            apiName: this.apiName,
            operationId: 'UpdateActiveNumber',
        });
    }
}
exports.ActiveNumberApi = ActiveNumberApi;
//# sourceMappingURL=active-number-api.js.map