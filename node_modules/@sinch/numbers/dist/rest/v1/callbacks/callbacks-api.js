"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CallbacksApi = void 0;
const numbers_domain_api_1 = require("../numbers-domain-api");
class CallbacksApi extends numbers_domain_api_1.NumbersDomainApi {
    /**
     * Initialize your interface with the provided API client.
     *
     * @param {SinchClientParameters} sinchClientParameters - The parameters used to initialize the API Client.
     */
    constructor(sinchClientParameters) {
        super(sinchClientParameters, 'CallbacksApi');
    }
    /**
     * Get callbacks configuration
     * Returns the callbacks configuration for the specified project
     * @param {GetCallbackConfigurationRequestData} data - The data to provide to the API call.
     */
    async get(data) {
        this.client = this.getSinchClient();
        const getParams = this.client.extractQueryParams(data, []);
        const headers = {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
        };
        const body = '';
        const basePathUrl = `${this.client.apiClientOptions.hostname}/v1/projects/${this.client.apiClientOptions.projectId}/callbackConfiguration`;
        const requestOptions = await this.client.prepareOptions(basePathUrl, 'GET', getParams, headers, body || undefined);
        const url = this.client.prepareUrl(requestOptions.hostname, requestOptions.queryParams);
        return this.client.processCall({
            url,
            requestOptions,
            apiName: this.apiName,
            operationId: 'GetCallbackConfiguration',
        });
    }
    /**
     * Update callback configuration
     * Updates the callbacks configuration for the specified project
     * @param {UpdateCallbackConfigurationRequestData} data - The data to provide to the API call.
     */
    async update(data) {
        this.client = this.getSinchClient();
        const getParams = this.client.extractQueryParams(data, []);
        const headers = {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
        };
        const body = data['updateCallbackConfigurationRequestBody']
            ? JSON.stringify(data['updateCallbackConfigurationRequestBody'])
            : '{}';
        const basePathUrl = `${this.client.apiClientOptions.hostname}/v1/projects/${this.client.apiClientOptions.projectId}/callbackConfiguration`;
        const requestOptions = await this.client.prepareOptions(basePathUrl, 'PATCH', getParams, headers, body || undefined);
        const url = this.client.prepareUrl(requestOptions.hostname, requestOptions.queryParams);
        return this.client.processCall({
            url,
            requestOptions,
            apiName: this.apiName,
            operationId: 'UpdateCallbackConfiguration',
        });
    }
}
exports.CallbacksApi = CallbacksApi;
//# sourceMappingURL=callbacks-api.js.map