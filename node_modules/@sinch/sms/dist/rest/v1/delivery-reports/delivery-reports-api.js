"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DeliveryReportsApi = void 0;
const sdk_client_1 = require("@sinch/sdk-client");
const sms_domain_api_1 = require("../sms-domain-api");
class DeliveryReportsApi extends sms_domain_api_1.SmsDomainApi {
    /**
     * Initialize your interface
     *
     * @param {SinchClientParameters} sinchClientParameters - The parameters used to initialize the API Client.
     */
    constructor(sinchClientParameters) {
        super(sinchClientParameters, 'DeliveryReportsApi');
    }
    /**
     * Retrieve a delivery report
     * Delivery reports can be retrieved even if no callback was requested. The difference between a summary and a full report is only that the full report contains the phone numbers in &lt;a href&#x3D;\&quot;https://community.sinch.com/t5/Glossary/E-164/ta-p/7537\&quot; target&#x3D;\&quot;_blank\&quot;&gt;E.164&lt;/a&gt; format for each status code.
     * @param { GetDeliveryReportByBatchIdRequestData } data - The data to provide to the API call.
     */
    async get(data) {
        this.client = this.getSinchClient();
        data['type'] = data['type'] !== undefined ? data['type'] : 'summary';
        const getParams = this.client.extractQueryParams(data, ['type', 'status', 'code']);
        const headers = {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
        };
        const body = '';
        const basePathUrl = `${this.client.apiClientOptions.hostname}/xms/v1/${this.client.apiClientOptions.projectId}/batches/${data['batch_id']}/delivery_report`;
        const requestOptions = await this.client.prepareOptions(basePathUrl, 'GET', getParams, headers, body || undefined);
        const url = this.client.prepareUrl(requestOptions.hostname, requestOptions.queryParams);
        return this.client.processCall({
            url,
            requestOptions,
            apiName: this.apiName,
            operationId: 'GetDeliveryReportByBatchId',
        });
    }
    /**
     * Retrieve a recipient delivery report
     * A recipient delivery report contains the message status for a single recipient phone number.
     * @param { GetDeliveryReportByPhoneNumberRequestData } data - The data to provide to the API call.
     */
    async getForNumber(data) {
        this.client = this.getSinchClient();
        const getParams = this.client.extractQueryParams(data, []);
        const headers = {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
        };
        const body = '';
        const basePathUrl = `${this.client.apiClientOptions.hostname}/xms/v1/${this.client.apiClientOptions.projectId}/batches/${data['batch_id']}/delivery_report/${data['recipient_msisdn']}`;
        const requestOptions = await this.client.prepareOptions(basePathUrl, 'GET', getParams, headers, body || undefined);
        const url = this.client.prepareUrl(requestOptions.hostname, requestOptions.queryParams);
        return this.client.processCall({
            url,
            requestOptions,
            apiName: this.apiName,
            operationId: 'GetDeliveryReportByPhoneNumber',
        });
    }
    /**
     * Retrieve a list of delivery reports
     * Get a list of finished delivery reports.  This operation supports pagination.
     * @param { ListDeliveryReportsRequestData } data - The data to provide to the API call.
     * @return {ApiListPromise<RecipientDeliveryReport>}
     */
    list(data) {
        this.client = this.getSinchClient();
        data['page'] = data['page'] !== undefined ? data['page'] : 0;
        data['page_size'] = data['page_size'] !== undefined ? data['page_size'] : 30;
        const getParams = this.client.extractQueryParams(data, ['page', 'page_size', 'start_date', 'end_date', 'status', 'code', 'client_reference']);
        const headers = {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
        };
        const body = '';
        const basePathUrl = `${this.client.apiClientOptions.hostname}/xms/v1/${this.client.apiClientOptions.projectId}/delivery_reports`;
        const requestOptionsPromise = this.client.prepareOptions(basePathUrl, 'GET', getParams, headers, body || undefined);
        const operationProperties = {
            pagination: sdk_client_1.PaginationEnum.PAGE,
            apiName: this.apiName,
            operationId: 'GetDeliveryReports',
            dataKey: 'delivery_reports',
        };
        // Create the promise containing the response wrapped as a PageResult
        const listPromise = (0, sdk_client_1.buildPageResultPromise)(this.client, requestOptionsPromise, operationProperties);
        // Add properties to the Promise to offer the possibility to use it as an iterator
        Object.assign(listPromise, (0, sdk_client_1.createIteratorMethodsForPagination)(this.client, requestOptionsPromise, listPromise, operationProperties));
        return listPromise;
    }
}
exports.DeliveryReportsApi = DeliveryReportsApi;
//# sourceMappingURL=delivery-reports-api.js.map