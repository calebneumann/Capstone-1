"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GroupsApi = void 0;
const sdk_client_1 = require("@sinch/sdk-client");
const sms_domain_api_1 = require("../sms-domain-api");
class GroupsApi extends sms_domain_api_1.SmsDomainApi {
    /**
     * Initialize your interface
     *
     * @param {SinchClientParameters} sinchClientParameters - The parameters used to initialize the API Client.
     */
    constructor(sinchClientParameters) {
        super(sinchClientParameters, 'GroupsApi');
    }
    /**
     * Create a group
     * A group is a set of phone numbers (MSISDNs) that can be used as a target in the &#x60;send_batch_msg&#x60; operation. An MSISDN can only occur once in a group and any attempts to add a duplicate would be ignored but not rejected.
     * @param { CreateGroupRequestData } data - The data to provide to the API call.
     */
    async create(data) {
        this.client = this.getSinchClient();
        const getParams = this.client.extractQueryParams(data, []);
        const headers = {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
        };
        const body = data['createGroupRequestBody'] ? JSON.stringify(data['createGroupRequestBody']) : '{}';
        const basePathUrl = `${this.client.apiClientOptions.hostname}/xms/v1/${this.client.apiClientOptions.projectId}/groups`;
        const requestOptions = await this.client.prepareOptions(basePathUrl, 'POST', getParams, headers, body || undefined);
        const url = this.client.prepareUrl(requestOptions.hostname, requestOptions.queryParams);
        return this.client.processCall({
            url,
            requestOptions,
            apiName: this.apiName,
            operationId: 'CreateGroup',
        });
    }
    /**
     * Delete a group
     * This operation deletes the group with the provided group ID.
     * @param { DeleteGroupRequestData } data - The data to provide to the API call.
     */
    async delete(data) {
        this.client = this.getSinchClient();
        const getParams = this.client.extractQueryParams(data, []);
        const headers = {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
        };
        const body = '';
        const basePathUrl = `${this.client.apiClientOptions.hostname}/xms/v1/${this.client.apiClientOptions.projectId}/groups/${data['group_id']}`;
        const requestOptions = await this.client.prepareOptions(basePathUrl, 'DELETE', getParams, headers, body || undefined);
        const url = this.client.prepareUrl(requestOptions.hostname, requestOptions.queryParams);
        return this.client.processCall({
            url,
            requestOptions,
            apiName: this.apiName,
            operationId: 'DeleteGroup',
        });
    }
    /**
     * Get phone numbers for a group
     * This operation retrieves the members of the group with the provided group ID.
     * @param { ListMembersRequestData } data - The data to provide to the API call.
     */
    async listMembers(data) {
        this.client = this.getSinchClient();
        const getParams = this.client.extractQueryParams(data, []);
        const headers = {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
        };
        const body = '';
        const basePathUrl = `${this.client.apiClientOptions.hostname}/xms/v1/${this.client.apiClientOptions.projectId}/groups/${data['group_id']}/members`;
        const requestOptions = await this.client.prepareOptions(basePathUrl, 'GET', getParams, headers, body || undefined);
        const url = this.client.prepareUrl(requestOptions.hostname, requestOptions.queryParams);
        return this.client.processCall({
            url,
            requestOptions,
            apiName: this.apiName,
            operationId: 'GetMembers',
        });
    }
    /**
     * List Groups
     * With the list operation you can list all groups that you have created. This operation supports pagination.  Groups are returned in reverse chronological order.
     * @param { ListGroupsRequestData } data - The data to provide to the API call.
     * @return {ApiListPromise<CreateGroupResponse>}
     */
    list(data) {
        this.client = this.getSinchClient();
        data['page'] = data['page'] !== undefined ? data['page'] : 0;
        data['page_size'] = data['page_size'] !== undefined ? data['page_size'] : 30;
        const getParams = this.client.extractQueryParams(data, ['page', 'page_size']);
        const headers = {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
        };
        const body = '';
        const basePathUrl = `${this.client.apiClientOptions.hostname}/xms/v1/${this.client.apiClientOptions.projectId}/groups`;
        const requestOptionsPromise = this.client.prepareOptions(basePathUrl, 'GET', getParams, headers, body || undefined);
        const operationProperties = {
            pagination: sdk_client_1.PaginationEnum.PAGE,
            apiName: this.apiName,
            operationId: 'ListGroups',
            dataKey: 'groups',
        };
        // Create the promise containing the response wrapped as a PageResult
        const listPromise = (0, sdk_client_1.buildPageResultPromise)(this.client, requestOptionsPromise, operationProperties);
        // Add properties to the Promise to offer the possibility to use it as an iterator
        Object.assign(listPromise, (0, sdk_client_1.createIteratorMethodsForPagination)(this.client, requestOptionsPromise, listPromise, operationProperties));
        return listPromise;
    }
    /**
     * Replace a group
     * The replace operation will replace all parameters, including members, of an existing group with new values.  Replacing a group targeted by a batch message scheduled in the future is allowed and changes will be reflected when the batch is sent.
     * @param { ReplaceGroupRequestData } data - The data to provide to the API call.
     */
    async replace(data) {
        this.client = this.getSinchClient();
        const getParams = this.client.extractQueryParams(data, []);
        const headers = {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
        };
        const body = data['replaceGroupRequestBody'] ? JSON.stringify(data['replaceGroupRequestBody']) : '{}';
        const basePathUrl = `${this.client.apiClientOptions.hostname}/xms/v1/${this.client.apiClientOptions.projectId}/groups/${data['group_id']}`;
        const requestOptions = await this.client.prepareOptions(basePathUrl, 'PUT', getParams, headers, body || undefined);
        const url = this.client.prepareUrl(requestOptions.hostname, requestOptions.queryParams);
        return this.client.processCall({
            url,
            requestOptions,
            apiName: this.apiName,
            operationId: 'ReplaceGroup',
        });
    }
    /**
     * Retrieve a group
     * This operation retrieves a specific group with the provided group ID.
     * @param { GetGroupRequestData } data - The data to provide to the API call.
     */
    async get(data) {
        this.client = this.getSinchClient();
        const getParams = this.client.extractQueryParams(data, []);
        const headers = {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
        };
        const body = '';
        const basePathUrl = `${this.client.apiClientOptions.hostname}/xms/v1/${this.client.apiClientOptions.projectId}/groups/${data['group_id']}`;
        const requestOptions = await this.client.prepareOptions(basePathUrl, 'GET', getParams, headers, body || undefined);
        const url = this.client.prepareUrl(requestOptions.hostname, requestOptions.queryParams);
        return this.client.processCall({
            url,
            requestOptions,
            apiName: this.apiName,
            operationId: 'RetrieveGroup',
        });
    }
    /**
     * Update a group
     * With the update group operation, you can add and remove members in an existing group as well as rename the group.  This method encompasses a few ways to update a group:  1. By using &#x60;add&#x60; and &#x60;remove&#x60; arrays containing phone numbers, you control the group movements. Any list of valid numbers in E.164 format can be added. 2. By using the &#x60;auto_update&#x60; object, your customer can add or remove themselves from groups.  3. You can also add or remove other groups into this group with &#x60;add_from_group&#x60; and &#x60;remove_from_group&#x60;.  #### Other group update info  - The request will not be rejected for duplicate adds or unknown removes. - The additions will be done before the deletions. If an phone number is on both lists, it will not be apart of the resulting group. - Updating a group targeted by a batch message scheduled in the future is allowed. Changes will be reflected when the batch is sent.
     * @param { UpdateGroupRequestData } data - The data to provide to the API call.
     */
    async update(data) {
        this.client = this.getSinchClient();
        const getParams = this.client.extractQueryParams(data, []);
        const headers = {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
        };
        const body = data['updateGroupRequestBody'] ? JSON.stringify(data['updateGroupRequestBody']) : '{}';
        const basePathUrl = `${this.client.apiClientOptions.hostname}/xms/v1/${this.client.apiClientOptions.projectId}/groups/${data['group_id']}`;
        const requestOptions = await this.client.prepareOptions(basePathUrl, 'POST', getParams, headers, body || undefined);
        const url = this.client.prepareUrl(requestOptions.hostname, requestOptions.queryParams);
        return this.client.processCall({
            url,
            requestOptions,
            apiName: this.apiName,
            operationId: 'UpdateGroup',
        });
    }
}
exports.GroupsApi = GroupsApi;
//# sourceMappingURL=groups-api.js.map