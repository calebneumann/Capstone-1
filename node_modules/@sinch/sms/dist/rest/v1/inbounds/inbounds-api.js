"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InboundsApi = void 0;
const sdk_client_1 = require("@sinch/sdk-client");
const sms_domain_api_1 = require("../sms-domain-api");
class InboundsApi extends sms_domain_api_1.SmsDomainApi {
    /**
     * Initialize your interface
     *
     * @param {SinchClientParameters} sinchClientParameters - The parameters used to initialize the API Client.
     */
    constructor(sinchClientParameters) {
        super(sinchClientParameters, 'InboundsApi');
    }
    /**
     * List incoming messages
     * With the list operation, you can list all inbound messages that you have received. This operation supports pagination. Inbounds are returned in reverse chronological order.
     * @param { ListInboundMessagesRequestData } data - The data to provide to the API call.
     * @return {ApiListPromise<InboundMessageResponse>}
     */
    list(data) {
        this.client = this.getSinchClient();
        const getParams = this.client.extractQueryParams(data, ['page', 'page_size', 'to', 'start_date', 'end_date', 'client_reference']);
        const headers = {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
        };
        const body = '';
        const basePathUrl = `${this.client.apiClientOptions.hostname}/xms/v1/${this.client.apiClientOptions.projectId}/inbounds`;
        const requestOptionsPromise = this.client.prepareOptions(basePathUrl, 'GET', getParams, headers, body || undefined);
        const operationProperties = {
            pagination: sdk_client_1.PaginationEnum.PAGE,
            apiName: this.apiName,
            operationId: 'ListInboundMessages',
            dataKey: 'inbounds',
        };
        // Create the promise containing the response wrapped as a PageResult
        const listPromise = (0, sdk_client_1.buildPageResultPromise)(this.client, requestOptionsPromise, operationProperties);
        // Add properties to the Promise to offer the possibility to use it as an iterator
        Object.assign(listPromise, (0, sdk_client_1.createIteratorMethodsForPagination)(this.client, requestOptionsPromise, listPromise, operationProperties));
        return listPromise;
    }
    /**
     * Retrieve inbound message
     * This operation retrieves a specific inbound message with the provided inbound ID.
     * @param { GetInboundMessageRequestData } data - The data to provide to the API call.
     */
    async get(data) {
        this.client = this.getSinchClient();
        const getParams = this.client.extractQueryParams(data, []);
        const headers = {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
        };
        const body = '';
        const basePathUrl = `${this.client.apiClientOptions.hostname}/xms/v1/${this.client.apiClientOptions.projectId}/inbounds/${data['inbound_id']}`;
        const requestOptions = await this.client.prepareOptions(basePathUrl, 'GET', getParams, headers, body || undefined);
        const url = this.client.prepareUrl(requestOptions.hostname, requestOptions.queryParams);
        return this.client.processCall({
            url,
            requestOptions,
            apiName: this.apiName,
            operationId: 'RetrieveInboundMessage',
        });
    }
}
exports.InboundsApi = InboundsApi;
//# sourceMappingURL=inbounds-api.js.map