import { ApiListPromise, FileBuffer, SinchClientParameters } from '@sinch/sdk-client';
import { FaxDomainApi } from '../fax-domain-api';
import { Fax, DeleteFaxContentRequestData, DownloadFaxContentRequestData, GetFaxRequestData, ListFaxesRequestData, SendFaxRequestData } from '../../../models';
export declare class FaxesApi extends FaxDomainApi {
    /**
     * Initialize your interface
     *
     * @param {SinchClientParameters} sinchClientParameters - The parameters used to initialize the API Client.
     */
    constructor(sinchClientParameters: SinchClientParameters);
    /**
     * Delete fax content
     * Delete the fax content for a fax using the ID number of the fax. Please note that this only deletes the content of the fax from storage.
     * @param { DeleteFaxContentRequestData } data - The data to provide to the API call.
     */
    deleteContent(data: DeleteFaxContentRequestData): Promise<void>;
    /**
     * Download fax content
     * Download the fax content.
     * @param { DownloadFaxContentRequestData } data - The data to provide to the API call.
     */
    downloadContent(data: DownloadFaxContentRequestData): Promise<FileBuffer>;
    /**
     * Get fax
     * Get fax information using the ID number of the fax.
     * @param { GetFaxRequestData } data - The data to provide to the API call.
     */
    get(data: GetFaxRequestData): Promise<Fax>;
    /**
     * List faxes
     * List faxes sent (OUTBOUND) or received (INBOUND), set parameters to filter the list. Example: Return calls made between 1st of January 2021 and  10th of January 2021. &#x60;&#x60;&#x60;  created&gt;&#x3D;2021-01-01&amp;startTime&lt;&#x3D;2021-01-10 &#x60;&#x60;&#x60;
     * @param { ListFaxesRequestData } data - The data to provide to the API call.
     * @return {ApiListPromise<Fax>}
     */
    list(data: ListFaxesRequestData): ApiListPromise<Fax>;
    /**
     * Send a fax
     * Create and send a fax.  Fax content may be supplied via one or more files or URLs of supported filetypes.
     * This endpoint supports the following content types for the fax payload:
     *   - Multipart/form-data
     *   - Application/json
     * We will however always return a fax object in the response in application json.
     * If you supply a callbackUrl the callback will be sent as multipart/form-data with the content of the fax as an attachment to the body, *unless* you specify callbackContentType as application/json.
     * #### file(s)
     *    Files may be included in the POST request as multipart/form-data parts.
     * #### contentUrl
     *    Any URL on the Internet (including ones with basic authentication), and we'll pull it down and make it a fax. This might be useful to you if you're using a web framework for templates and creating fax files.
     *    Please note: If you are passing fax a secure URL (starting with 'https://'), make sure that your SSL certificate (including your intermediate cert, if you have one) is installed properly, valid, and up-to-date.
     * @param { SendFaxRequestData } data - The data to provide to the API call.
     */
    send(data: SendFaxRequestData): Promise<Fax>;
}
