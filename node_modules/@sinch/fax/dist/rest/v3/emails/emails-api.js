"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EmailsApi = void 0;
const sdk_client_1 = require("@sinch/sdk-client");
const fax_domain_api_1 = require("../fax-domain-api");
class EmailsApi extends fax_domain_api_1.FaxDomainApi {
    /**
     * Initialize your interface
     *
     * @param {SinchClientParameters} sinchClientParameters - The parameters used to initialize the API Client.
     */
    constructor(sinchClientParameters) {
        super(sinchClientParameters, 'EmailsApi');
    }
    /**
     * Add an email
     * Add an email to be used for sending and receiving faxes.
     * @param { AddEmailToNumbersRequestData } data - The data to provide to the API call.
     */
    async addToNumbers(data) {
        this.client = this.getSinchClient();
        const getParams = this.client.extractQueryParams(data, []);
        const headers = {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
        };
        const body = data['emailRequestBody'] ? JSON.stringify(data['emailRequestBody']) : '{}';
        const basePathUrl = `${this.client.apiClientOptions.hostname}/v3/projects/${this.client.apiClientOptions.projectId}/emails`;
        const requestOptions = await this.client.prepareOptions(basePathUrl, 'POST', getParams, headers, body || undefined);
        const url = this.client.prepareUrl(requestOptions.hostname, requestOptions.queryParams);
        return this.client.processCall({
            url,
            requestOptions,
            apiName: this.apiName,
            operationId: 'CreateEmailForProject',
        });
    }
    /**
     * Remove email
     * Delete an email and associated numbers to that email to disable that email from sending and receiving faxes.
     * @param { DeleteEmailRequestData } data - The data to provide to the API call.
     */
    async delete(data) {
        this.client = this.getSinchClient();
        const getParams = this.client.extractQueryParams(data, []);
        const headers = {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
        };
        const body = data['email'] ? JSON.stringify(data['email']) : '{}';
        const basePathUrl = `${this.client.apiClientOptions.hostname}/v3/projects/${this.client.apiClientOptions.projectId}/emails/${data['email']}`;
        const requestOptions = await this.client.prepareOptions(basePathUrl, 'DELETE', getParams, headers, body || undefined);
        const url = this.client.prepareUrl(requestOptions.hostname, requestOptions.queryParams);
        return this.client.processCall({
            url,
            requestOptions,
            apiName: this.apiName,
            operationId: 'DeleteEmail',
        });
    }
    /**
     * List emails
     * List emails for the project.
     * @param { ListEmailsForProjectRequestData } data - The data to provide to the API call.
     * @return {ApiListPromise<Email>} - The list of emails for the project
     */
    list(data) {
        this.client = this.getSinchClient();
        const getParams = this.client.extractQueryParams(data, ['pageSize', 'page']);
        const headers = {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
        };
        const body = '';
        const basePathUrl = `${this.client.apiClientOptions.hostname}/v3/projects/${this.client.apiClientOptions.projectId}/emails`;
        const requestOptionsPromise = this.client.prepareOptions(basePathUrl, 'GET', getParams, headers, body || undefined);
        const operationProperties = {
            pagination: sdk_client_1.PaginationEnum.PAGE3,
            apiName: this.apiName,
            operationId: 'GetEmailsForProject',
            dataKey: 'emails',
        };
        // Create the promise containing the response wrapped as a PageResult
        const listPromise = (0, sdk_client_1.buildPageResultPromise)(this.client, requestOptionsPromise, operationProperties);
        // Add properties to the Promise to offer the possibility to use it as an iterator
        Object.assign(listPromise, (0, sdk_client_1.createIteratorMethodsForPagination)(this.client, requestOptionsPromise, listPromise, operationProperties));
        return listPromise;
    }
    /**
     * Get numbers for email
     * Get configured numbers for an email
     * @param { ListNumbersByEmailRequestData } data - The data to provide to the API call.
     * @return {ApiListPromise<ServicePhoneNumber>}
     */
    listNumbers(data) {
        this.client = this.getSinchClient();
        const getParams = this.client.extractQueryParams(data, [
            'email',
            'pageSize',
            'page'
        ]);
        const headers = {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
        };
        const body = '';
        const basePathUrl = `${this.client.apiClientOptions.hostname}/v3/projects/${this.client.apiClientOptions.projectId}/emails/${data['email']}/numbers`;
        const requestOptionsPromise = this.client.prepareOptions(basePathUrl, 'GET', getParams, headers, body || undefined);
        const operationProperties = {
            pagination: sdk_client_1.PaginationEnum.PAGE3,
            apiName: this.apiName,
            operationId: 'GetNumbersByEmail',
            dataKey: 'phoneNumbers',
        };
        // Create the promise containing the response wrapped as a PageResult
        const listPromise = (0, sdk_client_1.buildPageResultPromise)(this.client, requestOptionsPromise, operationProperties);
        // Add properties to the Promise to offer the possibility to use it as an iterator
        Object.assign(listPromise, (0, sdk_client_1.createIteratorMethodsForPagination)(this.client, requestOptionsPromise, listPromise, operationProperties));
        return listPromise;
    }
    /**
     * Update numbers for email
     * Set the numbers for an email.
     * @param { UpdateEmailRequestData } data - The data to provide to the API call.
     */
    async update(data) {
        this.client = this.getSinchClient();
        const getParams = this.client.extractQueryParams(data, []);
        const headers = {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
        };
        const body = data['updateEmailRequestBody']
            ? JSON.stringify(data['updateEmailRequestBody'])
            : '{}';
        const basePathUrl = `${this.client.apiClientOptions.hostname}/v3/projects/${this.client.apiClientOptions.projectId}/emails/${data['email']}`;
        const requestOptions = await this.client.prepareOptions(basePathUrl, 'PUT', getParams, headers, body || undefined);
        const url = this.client.prepareUrl(requestOptions.hostname, requestOptions.queryParams);
        return this.client.processCall({
            url,
            requestOptions,
            apiName: this.apiName,
            operationId: 'UpdateEmail',
        });
    }
}
exports.EmailsApi = EmailsApi;
//# sourceMappingURL=emails-api.js.map