"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FaxCallbackWebhooks = void 0;
class FaxCallbackWebhooks {
    /**
     * Reviver for a Fax Event
     * This method ensures the object can be treated as a Fax Event and should be called before any action is taken to manipulate the object.
     * @param {any} eventBody - the event body or form containing the Fax event notification.
     * @return {FaxWebhookEventParsed} - The parsed Fax event object
     */
    parseEvent(eventBody) {
        let incomingFaxEvent = null;
        let faxCompletedEvent = null;
        if (eventBody.event) {
            switch (eventBody.event) {
                case 'INCOMING_FAX':
                    incomingFaxEvent = eventBody;
                    if (eventBody.eventTime) {
                        incomingFaxEvent.eventTime = new Date(eventBody.eventTime);
                    }
                    // In case of multipart/form-data, the server may not have parsed the 'fax' property as a JSON object, so we do it here
                    if (typeof eventBody.fax === 'string') {
                        incomingFaxEvent.fax = this.reviveFax(eventBody.fax);
                    }
                    return incomingFaxEvent;
                case 'FAX_COMPLETED':
                    faxCompletedEvent = eventBody;
                    if (faxCompletedEvent.eventTime) {
                        faxCompletedEvent.eventTime = new Date(faxCompletedEvent.eventTime);
                    }
                    // In case of multipart/form-data, the server may not have parsed the 'fax' property as a JSON object, so we do it here
                    if (typeof eventBody.fax === 'string') {
                        faxCompletedEvent.fax = this.reviveFax(eventBody.fax);
                    }
                    return faxCompletedEvent;
                default:
                    throw new Error(`Unknown Fax event: ${eventBody.event}`);
            }
        }
        console.log(eventBody);
        throw new Error('Unknown Fax event');
    }
    reviveFax(faxAsString) {
        const fax = JSON.parse(faxAsString);
        if (fax.createTime) {
            fax.createTime = new Date(fax.createTime);
        }
        if (fax.completedTime) {
            fax.completedTime = new Date(fax.completedTime);
        }
        return fax;
    }
    validateAuthenticationHeader(
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    _headers, _body, _path, _method) {
        // No header validation is implemented for Fax API
        return true;
    }
}
exports.FaxCallbackWebhooks = FaxCallbackWebhooks;
//# sourceMappingURL=callbacks-webhook.js.map