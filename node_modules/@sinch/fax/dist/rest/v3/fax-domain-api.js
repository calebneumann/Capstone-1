"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FaxDomainApi = void 0;
const sdk_client_1 = require("@sinch/sdk-client");
class FaxDomainApi {
    constructor(sinchClientParameters, apiName) {
        this.sinchClientParameters = sinchClientParameters;
        this.apiName = apiName;
    }
    /**
     * Update the default hostname for the API
     * @param {string} hostname - The new hostname to use for the APIs.
     */
    setHostname(hostname) {
        this.client = this.getSinchClient();
        this.client.apiClientOptions.hostname = hostname;
    }
    /**
     * Update the region in the basePath
     * @param {FaxRegion} region - The new region to send the requests to
     */
    setRegion(region) {
        this.sinchClientParameters.faxRegion = region;
        if (this.client) {
            this.client.apiClientOptions.hostname = this.buildHostname(region);
        }
    }
    /**
     * Updates the credentials used to authenticate API requests
     * @param {UnifiedCredentials} credentials
     */
    setCredentials(credentials) {
        const parametersBackup = { ...this.sinchClientParameters };
        this.sinchClientParameters = {
            ...parametersBackup,
            ...credentials,
        };
        this.resetApiClient();
        try {
            this.getSinchClient();
        }
        catch (error) {
            console.error('Impossible to assign the new credentials to the Fax API');
            this.sinchClientParameters = parametersBackup;
            throw error;
        }
    }
    resetApiClient() {
        this.client = undefined;
    }
    /**
     * Checks the configuration parameters are ok and initialize the API client. Once initialized, the same instance will
     * be returned for the subsequent API calls (singleton pattern)
     * @return {ApiClient} the API Client or throws an error in case the configuration parameters are not ok
     * @private
     */
    getSinchClient() {
        if (!this.client) {
            const apiClientOptions = (0, sdk_client_1.buildOAuth2ApiClientOptions)(this.sinchClientParameters, 'Fax');
            this.client = new sdk_client_1.ApiFetchClient(apiClientOptions);
            const region = this.sinchClientParameters.faxRegion ?? sdk_client_1.FaxRegion.DEFAULT;
            if (!Object.values(sdk_client_1.SupportedFaxRegion).includes(region)) {
                console.warn(`The region "${region}" is not known as a supported region for the Fax API`);
            }
            this.client.apiClientOptions.hostname = this.sinchClientParameters.faxHostname ?? this.buildHostname(region);
        }
        return this.client;
    }
    buildHostname(region) {
        const formattedRegion = region !== '' ? `${region}.` : '';
        return (0, sdk_client_1.formatRegionalizedHostname)(sdk_client_1.FAX_HOSTNAME, formattedRegion);
    }
}
exports.FaxDomainApi = FaxDomainApi;
//# sourceMappingURL=fax-domain-api.js.map