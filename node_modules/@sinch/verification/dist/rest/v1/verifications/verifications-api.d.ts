import { StartCalloutVerificationResponse, CalloutVerificationReportResponse, StartSeamlessVerificationResponse, StartFlashCallVerificationResponse, FlashCallVerificationReportResponse, StartSmsVerificationResponse, SMSVerificationReportResponse, ReportSmsVerificationByIdRequestData, ReportFlashCallVerificationByIdRequestData, ReportCalloutVerificationByIdRequestData, ReportSmsVerificationByIdentityRequestData, ReportFlashCallVerificationByIdentityRequestData, ReportCalloutVerificationByIdentityRequestData, StartSmsVerificationRequestData, StartFlashCallVerificationRequestData, StartCalloutVerificationRequestData, StartSeamlessVerificationRequestData, StartVerificationWithSms } from '../../../models';
import { SinchClientParameters } from '@sinch/sdk-client';
import { VerificationDomainApi } from '../verification-domain-api';
export declare class VerificationsApi extends VerificationDomainApi {
    /**
     * Initialize your interface
     *
     * @param {SinchClientParameters} sinchClientParameters - The parameters used to initialize the API Client.
     */
    constructor(sinchClientParameters: SinchClientParameters);
    /**
     * Report an SMS verification with ID
     * Report the received verification code to verify it, using the Verification ID of the Verification request.
     * @param { ReportSmsVerificationByIdRequestData } data - The data to provide to the API call.
     */
    reportSmsById(data: ReportSmsVerificationByIdRequestData): Promise<SMSVerificationReportResponse>;
    /**
     * Report a FlashCall verification with ID
     * Report the received verification code to verify it, using the Verification ID of the Verification request.
     * @param { ReportFlashCallVerificationByIdRequestData } data - The data to provide to the API call.
     */
    reportFlashCallById(data: ReportFlashCallVerificationByIdRequestData): Promise<FlashCallVerificationReportResponse>;
    /**
     * Report a Callout verification with ID
     * Report the received verification code to verify it, using the Verification ID of the Verification request.
     * @param { ReportCalloutVerificationByIdRequestData } data - The data to provide to the API call.
     */
    reportCalloutById(data: ReportCalloutVerificationByIdRequestData): Promise<CalloutVerificationReportResponse>;
    /**
     * Report an SMS verification using Identity
     * Report the received verification code (OTP) to verify it, using the identity of the user (in most cases, the phone number).
     * @param { ReportSmsVerificationByIdentityRequestData } data - The data to provide to the API call.
     */
    reportSmsByIdentity(data: ReportSmsVerificationByIdentityRequestData): Promise<SMSVerificationReportResponse>;
    /**
     * Report a FlashCall verification using Identity
     * Report the received verification code (CLI) to verify it, using the identity of the user (in most cases, the phone number).
     * @param { ReportFlashCallVerificationByIdentityRequestData } data - The data to provide to the API call.
     */
    reportFlashCallByIdentity(data: ReportFlashCallVerificationByIdentityRequestData): Promise<FlashCallVerificationReportResponse>;
    /**
     * Report a Callout verification using Identity
     * Report the received verification code (OTP) to verify it, using the identity of the user (in most cases, the phone number).
     * @param { ReportCalloutVerificationByIdentityRequestData } data - The data to provide to the API call.
     */
    reportCalloutByIdentity(data: ReportCalloutVerificationByIdentityRequestData): Promise<CalloutVerificationReportResponse>;
    /**
     * Start verification with SMS
     * This method is used by the mobile and web Verification SDKs to start a verification. It can also be used to request a verification from your backend, by making a request.
     * @param { StartSmsVerificationRequestData } data - The data to provide to the API call.
     */
    startSms(data: StartSmsVerificationRequestData): Promise<StartSmsVerificationResponse>;
    performStartSmsRequestBodyTransformation(body: StartVerificationWithSms): StartVerificationWithSms;
    formatTime(date: Date): string;
    /**
     * Start verification with a FlashCall
     * This method is used by the mobile and web Verification SDKs to start a verification. It can also be used to request a verification from your backend, by making a request.
     * @param { StartFlashCallVerificationRequestData } data - The data to provide to the API call.
     */
    startFlashCall(data: StartFlashCallVerificationRequestData): Promise<StartFlashCallVerificationResponse>;
    /**
     * Start verification with a callout
     * This method is used by the mobile and web Verification SDKs to start a verification. It can also be used to request a verification from your backend, by making a request.
     * @param { StartCalloutVerificationRequestData } data - The data to provide to the API call.
     */
    startCallout(data: StartCalloutVerificationRequestData): Promise<StartCalloutVerificationResponse>;
    /**
     * Start seamless verification (= data verification)
     * This method is used by the mobile and web Verification SDKs to start a verification. It can also be used to request a verification from your backend, by making a request.
     * @param { StartSeamlessVerificationRequestData } data - The data to provide to the API call.
     */
    startSeamless(data: StartSeamlessVerificationRequestData): Promise<StartSeamlessVerificationResponse>;
}
