"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VerificationsApi = void 0;
const verification_domain_api_1 = require("../verification-domain-api");
class VerificationsApi extends verification_domain_api_1.VerificationDomainApi {
    /**
     * Initialize your interface
     *
     * @param {SinchClientParameters} sinchClientParameters - The parameters used to initialize the API Client.
     */
    constructor(sinchClientParameters) {
        super(sinchClientParameters, 'VerificationsApi');
    }
    /**
     * Report an SMS verification with ID
     * Report the received verification code to verify it, using the Verification ID of the Verification request.
     * @param { ReportSmsVerificationByIdRequestData } data - The data to provide to the API call.
     */
    async reportSmsById(data) {
        this.client = this.getSinchClient();
        data.reportSmsVerificationByIdRequestBody.method = 'sms';
        const getParams = this.client.extractQueryParams(data, []);
        const headers = {
            'Content-Type': 'application/json; charset=UTF-8',
            'Accept': 'application/json',
        };
        const body = data['reportSmsVerificationByIdRequestBody']
            ? JSON.stringify(data['reportSmsVerificationByIdRequestBody'])
            : '{}';
        const path = `/verification/v1/verifications/id/${data['id']}`;
        const basePathUrl = this.client.apiClientOptions.hostname + path;
        const requestOptions = await this.client.prepareOptions(basePathUrl, 'PUT', getParams, headers, body || undefined, path);
        const url = this.client.prepareUrl(requestOptions.hostname, requestOptions.queryParams);
        return this.client.processCall({
            url,
            requestOptions,
            apiName: this.apiName,
            operationId: 'ReportSmsVerificationById',
        });
    }
    /**
     * Report a FlashCall verification with ID
     * Report the received verification code to verify it, using the Verification ID of the Verification request.
     * @param { ReportFlashCallVerificationByIdRequestData } data - The data to provide to the API call.
     */
    async reportFlashCallById(data) {
        this.client = this.getSinchClient();
        data.reportFlashCallVerificationByIdRequestBody.method = 'flashCall';
        const getParams = this.client.extractQueryParams(data, []);
        const headers = {
            'Content-Type': 'application/json; charset=UTF-8',
            'Accept': 'application/json',
        };
        const body = data['reportFlashCallVerificationByIdRequestBody']
            ? JSON.stringify(data['reportFlashCallVerificationByIdRequestBody'])
            : '{}';
        const path = `/verification/v1/verifications/id/${data['id']}`;
        const basePathUrl = this.client.apiClientOptions.hostname + path;
        const requestOptions = await this.client.prepareOptions(basePathUrl, 'PUT', getParams, headers, body || undefined, path);
        const url = this.client.prepareUrl(requestOptions.hostname, requestOptions.queryParams);
        return this.client.processCall({
            url,
            requestOptions,
            apiName: this.apiName,
            operationId: 'ReportFlashCallVerificationById',
        });
    }
    /**
     * Report a Callout verification with ID
     * Report the received verification code to verify it, using the Verification ID of the Verification request.
     * @param { ReportCalloutVerificationByIdRequestData } data - The data to provide to the API call.
     */
    async reportCalloutById(data) {
        this.client = this.getSinchClient();
        data.reportCalloutVerificationByIdRequestBody.method = 'callout';
        const getParams = this.client.extractQueryParams(data, []);
        const headers = {
            'Content-Type': 'application/json; charset=UTF-8',
            'Accept': 'application/json',
        };
        const body = data['reportCalloutVerificationByIdRequestBody']
            ? JSON.stringify(data['reportCalloutVerificationByIdRequestBody'])
            : '{}';
        const path = `/verification/v1/verifications/id/${data['id']}`;
        const basePathUrl = this.client.apiClientOptions.hostname + path;
        const requestOptions = await this.client.prepareOptions(basePathUrl, 'PUT', getParams, headers, body || undefined, path);
        const url = this.client.prepareUrl(requestOptions.hostname, requestOptions.queryParams);
        return this.client.processCall({
            url,
            requestOptions,
            apiName: this.apiName,
            operationId: 'ReportCalloutVerificationById',
        });
    }
    /**
     * Report an SMS verification using Identity
     * Report the received verification code (OTP) to verify it, using the identity of the user (in most cases, the phone number).
     * @param { ReportSmsVerificationByIdentityRequestData } data - The data to provide to the API call.
     */
    async reportSmsByIdentity(data) {
        this.client = this.getSinchClient();
        data.reportSmsVerificationByIdentityRequestBody.method = 'sms';
        const getParams = this.client.extractQueryParams(data, []);
        const headers = {
            'Content-Type': 'application/json; charset=UTF-8',
            'Accept': 'application/json',
        };
        const body = data['reportSmsVerificationByIdentityRequestBody']
            ? JSON.stringify(data['reportSmsVerificationByIdentityRequestBody'])
            : '{}';
        const path = `/verification/v1/verifications/number/${data['endpoint']}`;
        const basePathUrl = this.client.apiClientOptions.hostname + path;
        const requestOptions = await this.client.prepareOptions(basePathUrl, 'PUT', getParams, headers, body || undefined, path);
        const url = this.client.prepareUrl(requestOptions.hostname, requestOptions.queryParams);
        return this.client.processCall({
            url,
            requestOptions,
            apiName: this.apiName,
            operationId: 'ReportSmsVerificationByIdentity',
        });
    }
    /**
     * Report a FlashCall verification using Identity
     * Report the received verification code (CLI) to verify it, using the identity of the user (in most cases, the phone number).
     * @param { ReportFlashCallVerificationByIdentityRequestData } data - The data to provide to the API call.
     */
    async reportFlashCallByIdentity(data) {
        this.client = this.getSinchClient();
        data.reportFlashCallVerificationByIdentityRequestBody.method = 'flashCall';
        const getParams = this.client.extractQueryParams(data, []);
        const headers = {
            'Content-Type': 'application/json; charset=UTF-8',
            'Accept': 'application/json',
        };
        const body = data['reportFlashCallVerificationByIdentityRequestBody']
            ? JSON.stringify(data['reportFlashCallVerificationByIdentityRequestBody'])
            : '{}';
        const path = `/verification/v1/verifications/number/${data['endpoint']}`;
        const basePathUrl = this.client.apiClientOptions.hostname + path;
        const requestOptions = await this.client.prepareOptions(basePathUrl, 'PUT', getParams, headers, body || undefined, path);
        const url = this.client.prepareUrl(requestOptions.hostname, requestOptions.queryParams);
        return this.client.processCall({
            url,
            requestOptions,
            apiName: this.apiName,
            operationId: 'ReportFlashCallVerificationByIdentity',
        });
    }
    /**
     * Report a Callout verification using Identity
     * Report the received verification code (OTP) to verify it, using the identity of the user (in most cases, the phone number).
     * @param { ReportCalloutVerificationByIdentityRequestData } data - The data to provide to the API call.
     */
    async reportCalloutByIdentity(data) {
        this.client = this.getSinchClient();
        data.reportCalloutVerificationByIdentityRequestBody.method = 'callout';
        const getParams = this.client.extractQueryParams(data, []);
        const headers = {
            'Content-Type': 'application/json; charset=UTF-8',
            'Accept': 'application/json',
        };
        const body = data['reportCalloutVerificationByIdentityRequestBody']
            ? JSON.stringify(data['reportCalloutVerificationByIdentityRequestBody'])
            : '{}';
        const path = `/verification/v1/verifications/number/${data['endpoint']}`;
        const basePathUrl = this.client.apiClientOptions.hostname + path;
        const requestOptions = await this.client.prepareOptions(basePathUrl, 'PUT', getParams, headers, body || undefined, path);
        const url = this.client.prepareUrl(requestOptions.hostname, requestOptions.queryParams);
        return this.client.processCall({
            url,
            requestOptions,
            apiName: this.apiName,
            operationId: 'ReportCalloutVerificationByIdentity',
        });
    }
    /**
     * Start verification with SMS
     * This method is used by the mobile and web Verification SDKs to start a verification. It can also be used to request a verification from your backend, by making a request.
     * @param { StartSmsVerificationRequestData } data - The data to provide to the API call.
     */
    async startSms(data) {
        this.client = this.getSinchClient();
        data.startVerificationWithSmsRequestBody.method = 'sms';
        const getParams = this.client.extractQueryParams(data, []);
        const headers = {
            'Content-Type': 'application/json; charset=UTF-8',
            'Accept': 'application/json',
        };
        // Special fields handling: see method for details
        const requestDataBody = this.performStartSmsRequestBodyTransformation(data.startVerificationWithSmsRequestBody);
        const body = requestDataBody
            ? JSON.stringify(requestDataBody)
            : '{}';
        const path = '/verification/v1/verifications';
        const basePathUrl = this.client.apiClientOptions.hostname + path;
        const requestOptions = await this.client.prepareOptions(basePathUrl, 'POST', getParams, headers, body || undefined, path);
        const url = this.client.prepareUrl(requestOptions.hostname, requestOptions.queryParams);
        return this.client.processCall({
            url,
            requestOptions,
            apiName: this.apiName,
            operationId: 'StartVerificationWithSms',
        });
    }
    performStartSmsRequestBodyTransformation(body) {
        const requestDataBody = { ...body };
        if (requestDataBody.smsOptions?.expiry !== undefined) {
            const expiry = requestDataBody.smsOptions?.expiry;
            if (expiry instanceof Date) {
                requestDataBody.smsOptions.expiry = this.formatTime(expiry);
            }
        }
        return requestDataBody;
    }
    formatTime(date) {
        // Assume the hours needs to be set at the UTC time + Pad single-digit components with leading zeros
        const formattedHours = String(date.getUTCHours()).padStart(2, '0');
        const formattedMinutes = String(date.getUTCMinutes()).padStart(2, '0');
        const formattedSeconds = String(date.getUTCSeconds()).padStart(2, '0');
        // Concatenate the components with colons to form the formatted time string
        return `${formattedHours}:${formattedMinutes}:${formattedSeconds}`;
    }
    /**
     * Start verification with a FlashCall
     * This method is used by the mobile and web Verification SDKs to start a verification. It can also be used to request a verification from your backend, by making a request.
     * @param { StartFlashCallVerificationRequestData } data - The data to provide to the API call.
     */
    async startFlashCall(data) {
        this.client = this.getSinchClient();
        data.startVerificationWithFlashCallRequestBody.method = 'flashCall';
        const getParams = this.client.extractQueryParams(data, []);
        const headers = {
            'Content-Type': 'application/json; charset=UTF-8',
            'Accept': 'application/json',
        };
        const body = data['startVerificationWithFlashCallRequestBody']
            ? JSON.stringify(data['startVerificationWithFlashCallRequestBody'])
            : '{}';
        const path = '/verification/v1/verifications';
        const basePathUrl = this.client.apiClientOptions.hostname + path;
        const requestOptions = await this.client.prepareOptions(basePathUrl, 'POST', getParams, headers, body || undefined, path);
        const url = this.client.prepareUrl(requestOptions.hostname, requestOptions.queryParams);
        return this.client.processCall({
            url,
            requestOptions,
            apiName: this.apiName,
            operationId: 'StartVerificationWithFlashCall',
        });
    }
    /**
     * Start verification with a callout
     * This method is used by the mobile and web Verification SDKs to start a verification. It can also be used to request a verification from your backend, by making a request.
     * @param { StartCalloutVerificationRequestData } data - The data to provide to the API call.
     */
    async startCallout(data) {
        this.client = this.getSinchClient();
        data.startVerificationWithCalloutRequestBody.method = 'callout';
        const getParams = this.client.extractQueryParams(data, []);
        const headers = {
            'Content-Type': 'application/json; charset=UTF-8',
            'Accept': 'application/json',
        };
        const body = data['startVerificationWithCalloutRequestBody']
            ? JSON.stringify(data['startVerificationWithCalloutRequestBody'])
            : '{}';
        const path = '/verification/v1/verifications';
        const basePathUrl = this.client.apiClientOptions.hostname + path;
        const requestOptions = await this.client.prepareOptions(basePathUrl, 'POST', getParams, headers, body || undefined, path);
        const url = this.client.prepareUrl(requestOptions.hostname, requestOptions.queryParams);
        return this.client.processCall({
            url,
            requestOptions,
            apiName: this.apiName,
            operationId: 'StartVerificationWithCallout',
        });
    }
    /**
     * Start seamless verification (= data verification)
     * This method is used by the mobile and web Verification SDKs to start a verification. It can also be used to request a verification from your backend, by making a request.
     * @param { StartSeamlessVerificationRequestData } data - The data to provide to the API call.
     */
    async startSeamless(data) {
        this.client = this.getSinchClient();
        data.startSeamlessVerificationRequestBody.method = 'seamless';
        const getParams = this.client.extractQueryParams(data, []);
        const headers = {
            'Content-Type': 'application/json; charset=UTF-8',
            'Accept': 'application/json',
        };
        const body = data['startSeamlessVerificationRequestBody']
            ? JSON.stringify(data['startSeamlessVerificationRequestBody'])
            : '{}';
        const path = '/verification/v1/verifications';
        const basePathUrl = this.client.apiClientOptions.hostname + path;
        const requestOptions = await this.client.prepareOptions(basePathUrl, 'POST', getParams, headers, body || undefined, path);
        const url = this.client.prepareUrl(requestOptions.hostname, requestOptions.queryParams);
        return this.client.processCall({
            url,
            requestOptions,
            apiName: this.apiName,
            operationId: 'StartSeamlessVerification',
        });
    }
}
exports.VerificationsApi = VerificationsApi;
//# sourceMappingURL=verifications-api.js.map