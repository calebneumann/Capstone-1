import { AddAccessControlListToTrunk, AddAccessControlListToTrunkRequestData, CreateSipTrunkRequestData, DeleteAccessControlListFromTrunkRequestData, DeleteSipTrunkRequestData, ListAccessControlListsForTrunkRequestData, GetSipTrunkRequestData, ListSipTrunksRequestData, UpdateSipTrunkRequestData, SipTrunk } from '../../../models';
import { SinchClientParameters, ApiListPromise } from '@sinch/sdk-client';
import { ElasticSipTrunkingDomainApi } from '../elastic-sip-trunking-domain-api';
export declare class SipTrunksApi extends ElasticSipTrunkingDomainApi {
    /**
     * Initialize your interface
     *
     * @param {SinchClientParameters} sinchClientParameters - The parameters used to initialize the API Client.
     */
    constructor(sinchClientParameters: SinchClientParameters);
    /**
     * Add ACL to a trunk
     * Add an access control list entry to a trunk.
     * @param { AddAccessControlListToTrunkRequestData } data - The data to provide to the API call.
     */
    addAccessControlList(data: AddAccessControlListToTrunkRequestData): Promise<AddAccessControlListToTrunk>;
    /**
     * Create SIP trunk
     * Creates a new SIP trunk.
     * @param { CreateSipTrunkRequestData } data - The data to provide to the API call.
     */
    create(data: CreateSipTrunkRequestData): Promise<SipTrunk>;
    /**
     * Delete ACL from trunk
     * Remove an access control list entry from a trunk.
     * @param { DeleteAccessControlListFromTrunkRequestData } data - The data to provide to the API call.
     */
    deleteAccessControlList(data: DeleteAccessControlListFromTrunkRequestData): Promise<void>;
    /**
     * Delete SIP trunk
     * Delete a SIP trunk by its ID.
     * @param { DeleteSipTrunkRequestData } data - The data to provide to the API call.
     */
    delete(data: DeleteSipTrunkRequestData): Promise<void>;
    /**
     * List all ACLs for a trunk
     * Get all access control list entries for a trunk.
     * @param { ListAccessControlListsForTrunkRequestData } data - The data to provide to the API call.
     * @return { ApiListPromise<string> }
     */
    listAccessControlLists(data: ListAccessControlListsForTrunkRequestData): ApiListPromise<string>;
    /**
     * Get SIP Trunk
     * Search for a SIP trunk by ID.
     * @param { GetSipTrunkRequestData } data - The data to provide to the API call.
     */
    get(data: GetSipTrunkRequestData): Promise<SipTrunk>;
    /**
     * List SIP trunks
     * Returns a list of all SIP trunks. If you specify pagination settings, the list of SIP trunks can be returned separated and sorted into pages.
     * @param { ListSipTrunksRequestData } data - The data to provide to the API call.
     * @return { ApiListPromise<SipTrunk> }
     */
    list(data: ListSipTrunksRequestData): ApiListPromise<SipTrunk>;
    /**
     * Update SIP trunk
     * Update an existing SIP Trunk by ID. The whole object must be sent. Any missing fields will be set to null.
     * @param { UpdateSipTrunkRequestData } data - The data to provide to the API call.
     */
    update(data: UpdateSipTrunkRequestData): Promise<SipTrunk>;
}
