"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SipTrunksApi = void 0;
const sdk_client_1 = require("@sinch/sdk-client");
const elastic_sip_trunking_domain_api_1 = require("../elastic-sip-trunking-domain-api");
class SipTrunksApi extends elastic_sip_trunking_domain_api_1.ElasticSipTrunkingDomainApi {
    /**
     * Initialize your interface
     *
     * @param {SinchClientParameters} sinchClientParameters - The parameters used to initialize the API Client.
     */
    constructor(sinchClientParameters) {
        super(sinchClientParameters, 'SipTrunksApi');
    }
    /**
     * Add ACL to a trunk
     * Add an access control list entry to a trunk.
     * @param { AddAccessControlListToTrunkRequestData } data - The data to provide to the API call.
     */
    async addAccessControlList(data) {
        this.client = this.getSinchClient();
        const getParams = this.client.extractQueryParams(data, []);
        const headers = {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
        };
        const body = data['addAccessControlListToTrunkRequestBody']
            ? JSON.stringify(data['addAccessControlListToTrunkRequestBody'])
            : '{}';
        const basePathUrl = `${this.client.apiClientOptions.hostname}/v1/projects/${this.client.apiClientOptions.projectId}/trunks/${data['trunkId']}/accessControlLists`;
        const requestOptions = await this.client.prepareOptions(basePathUrl, 'POST', getParams, headers, body || undefined);
        const url = this.client.prepareUrl(requestOptions.hostname, requestOptions.queryParams);
        return this.client.processCall({
            url,
            requestOptions,
            apiName: this.apiName,
            operationId: 'AddAccessControlListToTrunk',
        });
    }
    /**
     * Create SIP trunk
     * Creates a new SIP trunk.
     * @param { CreateSipTrunkRequestData } data - The data to provide to the API call.
     */
    async create(data) {
        this.client = this.getSinchClient();
        const getParams = this.client.extractQueryParams(data, []);
        const headers = {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
        };
        const body = data['createSipTrunkRequestBody']
            ? JSON.stringify(data['createSipTrunkRequestBody'])
            : '{}';
        const basePathUrl = `${this.client.apiClientOptions.hostname}/v1/projects/${this.client.apiClientOptions.projectId}/trunks`;
        const requestOptions = await this.client.prepareOptions(basePathUrl, 'POST', getParams, headers, body || undefined);
        const url = this.client.prepareUrl(requestOptions.hostname, requestOptions.queryParams);
        return this.client.processCall({
            url,
            requestOptions,
            apiName: this.apiName,
            operationId: 'CreateSipTrunk',
        });
    }
    /**
     * Delete ACL from trunk
     * Remove an access control list entry from a trunk.
     * @param { DeleteAccessControlListFromTrunkRequestData } data - The data to provide to the API call.
     */
    async deleteAccessControlList(data) {
        this.client = this.getSinchClient();
        const getParams = this.client.extractQueryParams(data, []);
        const headers = {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
        };
        const body = '';
        const basePathUrl = `${this.client.apiClientOptions.hostname}/v1/projects/${this.client.apiClientOptions.projectId}/trunks/${data['trunkId']}/accessControlLists/${data['accessControlListId']}`;
        const requestOptions = await this.client.prepareOptions(basePathUrl, 'DELETE', getParams, headers, body || undefined);
        const url = this.client.prepareUrl(requestOptions.hostname, requestOptions.queryParams);
        return this.client.processCall({
            url,
            requestOptions,
            apiName: this.apiName,
            operationId: 'DeleteAccessControlListFromTrunk',
        });
    }
    /**
     * Delete SIP trunk
     * Delete a SIP trunk by its ID.
     * @param { DeleteSipTrunkRequestData } data - The data to provide to the API call.
     */
    async delete(data) {
        this.client = this.getSinchClient();
        const getParams = this.client.extractQueryParams(data, []);
        const headers = {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
        };
        const body = '';
        const basePathUrl = `${this.client.apiClientOptions.hostname}/v1/projects/${this.client.apiClientOptions.projectId}/trunks/${data['sipTrunkId']}`;
        const requestOptions = await this.client.prepareOptions(basePathUrl, 'DELETE', getParams, headers, body || undefined);
        const url = this.client.prepareUrl(requestOptions.hostname, requestOptions.queryParams);
        return this.client.processCall({
            url,
            requestOptions,
            apiName: this.apiName,
            operationId: 'DeleteSipTrunk',
        });
    }
    /**
     * List all ACLs for a trunk
     * Get all access control list entries for a trunk.
     * @param { ListAccessControlListsForTrunkRequestData } data - The data to provide to the API call.
     * @return { ApiListPromise<string> }
     */
    listAccessControlLists(data) {
        this.client = this.getSinchClient();
        const getParams = this.client.extractQueryParams(data, []);
        const headers = {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
        };
        const body = '';
        const basePathUrl = `${this.client.apiClientOptions.hostname}/v1/projects/${this.client.apiClientOptions.projectId}/trunks/${data['trunkId']}/accessControlLists`;
        const requestOptionsPromise = this.client.prepareOptions(basePathUrl, 'GET', getParams, headers, body || undefined);
        const operationProperties = {
            pagination: sdk_client_1.PaginationEnum.PAGE2,
            apiName: this.apiName,
            operationId: 'GetAccessControlListsForTrunk',
            dataKey: 'accessControlListIds',
        };
        // Create the promise containing the response wrapped as a PageResult
        const listPromise = (0, sdk_client_1.buildPageResultPromise)(this.client, requestOptionsPromise, operationProperties);
        // Add properties to the Promise to offer the possibility to use it as an iterator
        Object.assign(listPromise, (0, sdk_client_1.createIteratorMethodsForPagination)(this.client, requestOptionsPromise, listPromise, operationProperties));
        return listPromise;
    }
    /**
     * Get SIP Trunk
     * Search for a SIP trunk by ID.
     * @param { GetSipTrunkRequestData } data - The data to provide to the API call.
     */
    async get(data) {
        this.client = this.getSinchClient();
        const getParams = this.client.extractQueryParams(data, []);
        const headers = {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
        };
        const body = '';
        const basePathUrl = `${this.client.apiClientOptions.hostname}/v1/projects/${this.client.apiClientOptions.projectId}/trunks/${data['sipTrunkId']}`;
        const requestOptions = await this.client.prepareOptions(basePathUrl, 'GET', getParams, headers, body || undefined);
        const url = this.client.prepareUrl(requestOptions.hostname, requestOptions.queryParams);
        return this.client.processCall({
            url,
            requestOptions,
            apiName: this.apiName,
            operationId: 'GetSipTrunkById',
        });
    }
    /**
     * List SIP trunks
     * Returns a list of all SIP trunks. If you specify pagination settings, the list of SIP trunks can be returned separated and sorted into pages.
     * @param { ListSipTrunksRequestData } data - The data to provide to the API call.
     * @return { ApiListPromise<SipTrunk> }
     */
    list(data) {
        this.client = this.getSinchClient();
        data['page'] = data['page'] !== undefined ? data['page'] : 1;
        data['pageSize'] = data['pageSize'] !== undefined ? data['pageSize'] : 1000;
        const getParams = this.client.extractQueryParams(data, ['page', 'pageSize', 'domain']);
        const headers = {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
        };
        const body = '';
        const basePathUrl = `${this.client.apiClientOptions.hostname}/v1/projects/${this.client.apiClientOptions.projectId}/trunks`;
        const requestOptionsPromise = this.client.prepareOptions(basePathUrl, 'GET', getParams, headers, body || undefined);
        const operationProperties = {
            pagination: sdk_client_1.PaginationEnum.PAGE2,
            apiName: this.apiName,
            operationId: 'GetSipTrunks',
            dataKey: 'trunks',
        };
        // Create the promise containing the response wrapped as a PageResult
        const listPromise = (0, sdk_client_1.buildPageResultPromise)(this.client, requestOptionsPromise, operationProperties);
        // Add properties to the Promise to offer the possibility to use it as an iterator
        Object.assign(listPromise, (0, sdk_client_1.createIteratorMethodsForPagination)(this.client, requestOptionsPromise, listPromise, operationProperties));
        return listPromise;
    }
    /**
     * Update SIP trunk
     * Update an existing SIP Trunk by ID. The whole object must be sent. Any missing fields will be set to null.
     * @param { UpdateSipTrunkRequestData } data - The data to provide to the API call.
     */
    async update(data) {
        this.client = this.getSinchClient();
        const getParams = this.client.extractQueryParams(data, []);
        const headers = {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
        };
        const body = data['updateSipTrunkRequestBody']
            ? JSON.stringify(data['updateSipTrunkRequestBody'])
            : '{}';
        const basePathUrl = `${this.client.apiClientOptions.hostname}/v1/projects/${this.client.apiClientOptions.projectId}/trunks/${data['sipTrunkId']}`;
        const requestOptions = await this.client.prepareOptions(basePathUrl, 'PUT', getParams, headers, body || undefined);
        const url = this.client.prepareUrl(requestOptions.hostname, requestOptions.queryParams);
        return this.client.processCall({
            url,
            requestOptions,
            apiName: this.apiName,
            operationId: 'UpdateSipTrunk',
        });
    }
}
exports.SipTrunksApi = SipTrunksApi;
//# sourceMappingURL=sip-trunks-api.js.map