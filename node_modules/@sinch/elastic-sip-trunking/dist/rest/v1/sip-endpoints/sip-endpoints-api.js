"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SipEndpointsApi = void 0;
const sdk_client_1 = require("@sinch/sdk-client");
const elastic_sip_trunking_domain_api_1 = require("../elastic-sip-trunking-domain-api");
class SipEndpointsApi extends elastic_sip_trunking_domain_api_1.ElasticSipTrunkingDomainApi {
    /**
     * Initialize your interface
     *
     * @param {SinchClientParameters} sinchClientParameters - The parameters used to initialize the API Client.
     */
    constructor(sinchClientParameters) {
        super(sinchClientParameters, 'SipEndpointsApi');
    }
    /**
     * Create SIP endpoint
     * Create a new SIP endpoint.
     * @param { CreateSipEndpointRequestData } data - The data to provide to the API call.
     */
    async create(data) {
        this.client = this.getSinchClient();
        const getParams = this.client.extractQueryParams(data, []);
        const headers = {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
        };
        const body = data['createSipEndpointRequestBody']
            ? JSON.stringify(data['createSipEndpointRequestBody'])
            : '{}';
        const basePathUrl = `${this.client.apiClientOptions.hostname}/v1/projects/${this.client.apiClientOptions.projectId}/trunks/${data['sipTrunkId']}/endpoints`;
        const requestOptions = await this.client.prepareOptions(basePathUrl, 'POST', getParams, headers, body || undefined);
        const url = this.client.prepareUrl(requestOptions.hostname, requestOptions.queryParams);
        return this.client.processCall({
            url,
            requestOptions,
            apiName: this.apiName,
            operationId: 'CreateSipEndpoint',
        });
    }
    /**
     * Delete SIP endpoint
     * Delete a SIP endpoint by specifying its ID.
     * @param { DeleteSipEndpointRequestData } data - The data to provide to the API call.
     */
    async delete(data) {
        this.client = this.getSinchClient();
        const getParams = this.client.extractQueryParams(data, []);
        const headers = {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
        };
        const body = '';
        const basePathUrl = `${this.client.apiClientOptions.hostname}/v1/projects/${this.client.apiClientOptions.projectId}/trunks/${data['sipTrunkId']}/endpoints/${data['sipEndpointId']}`;
        const requestOptions = await this.client.prepareOptions(basePathUrl, 'DELETE', getParams, headers, body || undefined);
        const url = this.client.prepareUrl(requestOptions.hostname, requestOptions.queryParams);
        return this.client.processCall({
            url,
            requestOptions,
            apiName: this.apiName,
            operationId: 'DeleteSipEndpoint',
        });
    }
    /**
     * Return SIP endpoints
     * Returns a list of all SIP endpoints with paging.
     * @param { ListSipEndpointsRequestData } data - The data to provide to the API call.
     * @return { ApiListPromise<SipEndpoint> }
     */
    list(data) {
        this.client = this.getSinchClient();
        data['page'] = data['page'] !== undefined ? data['page'] : 1;
        data['pageSize'] = data['pageSize'] !== undefined ? data['pageSize'] : 1000;
        const getParams = this.client.extractQueryParams(data, ['page', 'pageSize']);
        const headers = {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
        };
        const body = '';
        const basePathUrl = `${this.client.apiClientOptions.hostname}/v1/projects/${this.client.apiClientOptions.projectId}/trunks/${data['sipTrunkId']}/endpoints`;
        const requestOptionsPromise = this.client.prepareOptions(basePathUrl, 'GET', getParams, headers, body || undefined);
        const operationProperties = {
            pagination: sdk_client_1.PaginationEnum.PAGE2,
            apiName: this.apiName,
            operationId: 'GetSipEndpoint',
            dataKey: 'endpoints',
        };
        // Create the promise containing the response wrapped as a PageResult
        const listPromise = (0, sdk_client_1.buildPageResultPromise)(this.client, requestOptionsPromise, operationProperties);
        // Add properties to the Promise to offer the possibility to use it as an iterator
        Object.assign(listPromise, (0, sdk_client_1.createIteratorMethodsForPagination)(this.client, requestOptionsPromise, listPromise, operationProperties));
        return listPromise;
    }
    /**
     * Get SIP endpoint by ID
     * Get a SIP endpoint by specifying its ID.
     * @param { GetSipEndpointByIdRequestData } data - The data to provide to the API call.
     */
    async get(data) {
        this.client = this.getSinchClient();
        const getParams = this.client.extractQueryParams(data, []);
        const headers = {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
        };
        const body = '';
        const basePathUrl = `${this.client.apiClientOptions.hostname}/v1/projects/${this.client.apiClientOptions.projectId}/trunks/${data['sipTrunkId']}/endpoints/${data['sipEndpointId']}`;
        const requestOptions = await this.client.prepareOptions(basePathUrl, 'GET', getParams, headers, body || undefined);
        const url = this.client.prepareUrl(requestOptions.hostname, requestOptions.queryParams);
        return this.client.processCall({
            url,
            requestOptions,
            apiName: this.apiName,
            operationId: 'GetSipEndpointById',
        });
    }
    /**
     * Update existing SIP endpoint
     * Updated an existing SIP endpoint by specifying its ID.
     * @param { UpdateSipEndpointRequestData } data - The data to provide to the API call.
     */
    async update(data) {
        this.client = this.getSinchClient();
        const getParams = this.client.extractQueryParams(data, []);
        const headers = {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
        };
        const body = data['updateSipEndpointRequestBody']
            ? JSON.stringify(data['updateSipEndpointRequestBody'])
            : '{}';
        const basePathUrl = `${this.client.apiClientOptions.hostname}/v1/projects/${this.client.apiClientOptions.projectId}/trunks/${data['sipTrunkId']}/endpoints/${data['sipEndpointId']}`;
        const requestOptions = await this.client.prepareOptions(basePathUrl, 'PUT', getParams, headers, body || undefined);
        const url = this.client.prepareUrl(requestOptions.hostname, requestOptions.queryParams);
        return this.client.processCall({
            url,
            requestOptions,
            apiName: this.apiName,
            operationId: 'UpdateSipEndpoint',
        });
    }
}
exports.SipEndpointsApi = SipEndpointsApi;
//# sourceMappingURL=sip-endpoints-api.js.map