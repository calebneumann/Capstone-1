import { CreateSipEndpointRequestData, DeleteSipEndpointRequestData, ListSipEndpointsRequestData, GetSipEndpointByIdRequestData, UpdateSipEndpointRequestData, SipEndpoint } from '../../../models';
import { SinchClientParameters, ApiListPromise } from '@sinch/sdk-client';
import { ElasticSipTrunkingDomainApi } from '../elastic-sip-trunking-domain-api';
export declare class SipEndpointsApi extends ElasticSipTrunkingDomainApi {
    /**
     * Initialize your interface
     *
     * @param {SinchClientParameters} sinchClientParameters - The parameters used to initialize the API Client.
     */
    constructor(sinchClientParameters: SinchClientParameters);
    /**
     * Create SIP endpoint
     * Create a new SIP endpoint.
     * @param { CreateSipEndpointRequestData } data - The data to provide to the API call.
     */
    create(data: CreateSipEndpointRequestData): Promise<SipEndpoint>;
    /**
     * Delete SIP endpoint
     * Delete a SIP endpoint by specifying its ID.
     * @param { DeleteSipEndpointRequestData } data - The data to provide to the API call.
     */
    delete(data: DeleteSipEndpointRequestData): Promise<void>;
    /**
     * Return SIP endpoints
     * Returns a list of all SIP endpoints with paging.
     * @param { ListSipEndpointsRequestData } data - The data to provide to the API call.
     * @return { ApiListPromise<SipEndpoint> }
     */
    list(data: ListSipEndpointsRequestData): ApiListPromise<SipEndpoint>;
    /**
     * Get SIP endpoint by ID
     * Get a SIP endpoint by specifying its ID.
     * @param { GetSipEndpointByIdRequestData } data - The data to provide to the API call.
     */
    get(data: GetSipEndpointByIdRequestData): Promise<SipEndpoint>;
    /**
     * Update existing SIP endpoint
     * Updated an existing SIP endpoint by specifying its ID.
     * @param { UpdateSipEndpointRequestData } data - The data to provide to the API call.
     */
    update(data: UpdateSipEndpointRequestData): Promise<SipEndpoint>;
}
