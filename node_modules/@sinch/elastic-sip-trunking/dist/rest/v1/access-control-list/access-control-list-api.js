"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AccessControlListApi = void 0;
const sdk_client_1 = require("@sinch/sdk-client");
const elastic_sip_trunking_domain_api_1 = require("../elastic-sip-trunking-domain-api");
const sip_trunks_1 = require("../sip-trunks");
class AccessControlListApi extends elastic_sip_trunking_domain_api_1.ElasticSipTrunkingDomainApi {
    /**
     * Initialize your interface
     *
     * @param {SinchClientParameters} sinchClientParameters - The parameters used to initialize the API Client.
     */
    constructor(sinchClientParameters) {
        super(sinchClientParameters, 'AccessControlListApi');
        this.sipTrunksApi = new sip_trunks_1.SipTrunksApi(sinchClientParameters);
    }
    /**
     * Add ACL to a trunk
     * Add an access control list entry to a trunk.
     * @param { AddAccessControlListToTrunkRequestData } data - The data to provide to the API call.
     */
    async addToTrunk(data) {
        return this.sipTrunksApi.addAccessControlList(data);
    }
    /**
     * List all ACLs for a trunk
     * Get all access control list entries for a trunk.
     * @param { ListAccessControlListsForTrunkRequestData } data - The data to provide to the API call.
     * @return { ApiListPromise<string> }
     */
    listForTrunk(data) {
        return this.sipTrunksApi.listAccessControlLists(data);
    }
    /**
     * Delete ACL from trunk
     * Remove an access control list entry from a trunk.
     * @param { DeleteAccessControlListFromTrunkRequestData } data - The data to provide to the API call.
     */
    async deleteFromTrunk(data) {
        return this.sipTrunksApi.deleteAccessControlList(data);
    }
    /**
     * Add IP range to ACL
     * Add an IP range to an access control list entry.
     * @param { AddIpRangeToAccessControlListRequestData } data - The data to provide to the API call.
     */
    async addIpRange(data) {
        this.client = this.getSinchClient();
        const getParams = this.client.extractQueryParams(data, []);
        const headers = {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
        };
        const body = data['addIpRangeRequestBody'] ? JSON.stringify(data['addIpRangeRequestBody']) : '{}';
        const basePathUrl = `${this.client.apiClientOptions.hostname}/v1/projects/${this.client.apiClientOptions.projectId}/accessControlLists/${data['accessControlListId']}/ipRanges`;
        const requestOptions = await this.client.prepareOptions(basePathUrl, 'POST', getParams, headers, body || undefined);
        const url = this.client.prepareUrl(requestOptions.hostname, requestOptions.queryParams);
        return this.client.processCall({
            url,
            requestOptions,
            apiName: this.apiName,
            operationId: 'AddIpRangeToAccessControlList',
        });
    }
    /**
     * Create an ACL
     * Create an access control list entry with at least one IP address or IP range.
     * @param { CreateAccessControlListRequestData } data - The data to provide to the API call.
     */
    async create(data) {
        this.client = this.getSinchClient();
        const getParams = this.client.extractQueryParams(data, []);
        const headers = {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
        };
        const body = data['createAccessControlListBody']
            ? JSON.stringify(data['createAccessControlListBody'])
            : '{}';
        const basePathUrl = `${this.client.apiClientOptions.hostname}/v1/projects/${this.client.apiClientOptions.projectId}/accessControlLists`;
        const requestOptions = await this.client.prepareOptions(basePathUrl, 'POST', getParams, headers, body || undefined);
        const url = this.client.prepareUrl(requestOptions.hostname, requestOptions.queryParams);
        return this.client.processCall({
            url,
            requestOptions,
            apiName: this.apiName,
            operationId: 'CreateAccessControlList',
        });
    }
    /**
     * Delete ACL
     * Delete an access control list entry.
     * @param { DeleteAccessControlListRequestData } data - The data to provide to the API call.
     */
    async delete(data) {
        this.client = this.getSinchClient();
        const getParams = this.client.extractQueryParams(data, []);
        const headers = {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
        };
        const body = '';
        const basePathUrl = `${this.client.apiClientOptions.hostname}/v1/projects/${this.client.apiClientOptions.projectId}/accessControlLists/${data['id']}`;
        const requestOptions = await this.client.prepareOptions(basePathUrl, 'DELETE', getParams, headers, body || undefined);
        const url = this.client.prepareUrl(requestOptions.hostname, requestOptions.queryParams);
        return this.client.processCall({
            url,
            requestOptions,
            apiName: this.apiName,
            operationId: 'DeleteAccessControlList',
        });
    }
    /**
     * Delete IP range from ACL
     * Remove an IP range to an access control list entry.
     * @param { DeleteIpRangeFromAccessControlListRequestData } data - The data to provide to the API call.
     */
    async deleteIpRange(data) {
        this.client = this.getSinchClient();
        const getParams = this.client.extractQueryParams(data, []);
        const headers = {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
        };
        const body = '';
        const basePathUrl = `${this.client.apiClientOptions.hostname}/v1/projects/${this.client.apiClientOptions.projectId}/accessControlLists/${data['accessControlListId']}/ipRanges/${data['ipRangeId']}`;
        const requestOptions = await this.client.prepareOptions(basePathUrl, 'DELETE', getParams, headers, body || undefined);
        const url = this.client.prepareUrl(requestOptions.hostname, requestOptions.queryParams);
        return this.client.processCall({
            url,
            requestOptions,
            apiName: this.apiName,
            operationId: 'DeleteIpRangeFromAccessControlList',
        });
    }
    /**
     * List ACLs
     * Fetches the list of Access Control List entries.
     * @param { ListAccessControlListRequestData } data - The data to provide to the API call.
     * @return { ApiListPromise<AccessControlList> }
     */
    list(data) {
        this.client = this.getSinchClient();
        const getParams = this.client.extractQueryParams(data, []);
        const headers = {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
        };
        const body = '';
        const basePathUrl = `${this.client.apiClientOptions.hostname}/v1/projects/${this.client.apiClientOptions.projectId}/accessControlLists`;
        const requestOptionsPromise = this.client.prepareOptions(basePathUrl, 'GET', getParams, headers, body || undefined);
        const operationProperties = {
            pagination: sdk_client_1.PaginationEnum.PAGE2,
            apiName: this.apiName,
            operationId: 'GetAccessControlList',
            dataKey: 'accessControlLists',
        };
        // Create the promise containing the response wrapped as a PageResult
        const listPromise = (0, sdk_client_1.buildPageResultPromise)(this.client, requestOptionsPromise, operationProperties);
        // Add properties to the Promise to offer the possibility to use it as an iterator
        Object.assign(listPromise, (0, sdk_client_1.createIteratorMethodsForPagination)(this.client, requestOptionsPromise, listPromise, operationProperties));
        return listPromise;
    }
    /**
     * List all IP ranges for ACL
     * Get all IP ranges for an access control list entry.
     * @param { ListIpRangesForAccessControlListRequestData } data - The data to provide to the API call.
     * @return { ApiListPromise<IpRange> }
     */
    listIpRanges(data) {
        this.client = this.getSinchClient();
        const getParams = this.client.extractQueryParams(data, []);
        const headers = {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
        };
        const body = '';
        const basePathUrl = `${this.client.apiClientOptions.hostname}/v1/projects/${this.client.apiClientOptions.projectId}/accessControlLists/${data['accessControlListId']}/ipRanges`;
        const requestOptionsPromise = this.client.prepareOptions(basePathUrl, 'GET', getParams, headers, body || undefined);
        const operationProperties = {
            pagination: sdk_client_1.PaginationEnum.PAGE2,
            apiName: this.apiName,
            operationId: 'GetIpRangesForAccessControlList',
            dataKey: 'ipRanges',
        };
        // Create the promise containing the response wrapped as a PageResult
        const listPromise = (0, sdk_client_1.buildPageResultPromise)(this.client, requestOptionsPromise, operationProperties);
        // Add properties to the Promise to offer the possibility to use it as an iterator
        Object.assign(listPromise, (0, sdk_client_1.createIteratorMethodsForPagination)(this.client, requestOptionsPromise, listPromise, operationProperties));
        return listPromise;
    }
    /**
     * Update ACL
     * Create an access control list entry with at least one IP address or IP range.
     * @param { UpdateAccessControlListRequestData } data - The data to provide to the API call.
     */
    async update(data) {
        this.client = this.getSinchClient();
        const getParams = this.client.extractQueryParams(data, []);
        const headers = {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
        };
        const body = data['updateAccessControlListRequestBody']
            ? JSON.stringify(data['updateAccessControlListRequestBody'])
            : '{}';
        const basePathUrl = `${this.client.apiClientOptions.hostname}/v1/projects/${this.client.apiClientOptions.projectId}/accessControlLists/${data['id']}`;
        const requestOptions = await this.client.prepareOptions(basePathUrl, 'PUT', getParams, headers, body || undefined);
        const url = this.client.prepareUrl(requestOptions.hostname, requestOptions.queryParams);
        return this.client.processCall({
            url,
            requestOptions,
            apiName: this.apiName,
            operationId: 'UpdateAccessControlList',
        });
    }
    /**
     * Update IP range
     * Update an IP range to an access control list entry.
     * @param { UpdateIpRangeFromAccessControlListRequestData } data - The data to provide to the API call.
     */
    async updateIpRange(data) {
        this.client = this.getSinchClient();
        const getParams = this.client.extractQueryParams(data, []);
        const headers = {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
        };
        const body = data['updateIpRangeRequestBody']
            ? JSON.stringify(data['updateIpRangeRequestBody'])
            : '{}';
        const basePathUrl = `${this.client.apiClientOptions.hostname}/v1/projects/${this.client.apiClientOptions.projectId}/accessControlLists/${data['accessControlListId']}/ipRanges/${data['ipRangeId']}`;
        const requestOptions = await this.client.prepareOptions(basePathUrl, 'PUT', getParams, headers, body || undefined);
        const url = this.client.prepareUrl(requestOptions.hostname, requestOptions.queryParams);
        return this.client.processCall({
            url,
            requestOptions,
            apiName: this.apiName,
            operationId: 'UpdateIpRangeFromAccessControlList',
        });
    }
}
exports.AccessControlListApi = AccessControlListApi;
//# sourceMappingURL=access-control-list-api.js.map