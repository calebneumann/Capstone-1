"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Oauth2TokenRequest = void 0;
const request_plugin_1 = require("../core/request-plugin");
const additional_headers_1 = require("../additional-headers");
const oauth2_api_1 = require("./oauth2-api");
const basicAuthentication_1 = require("../basicAuthentication");
const api_fetch_client_1 = require("../../client/api-fetch-client");
const domain_1 = require("../../domain");
class Oauth2TokenRequest {
    getName() {
        return request_plugin_1.RequestPluginEnum.OAUTH2_TOKEN_REQUEST;
    }
    constructor(clientId, clientSecret, authenticationUrl) {
        const basicAuthenticationPlugin = new basicAuthentication_1.BasicAuthenticationRequest(clientId, clientSecret);
        if (!authenticationUrl) {
            authenticationUrl = domain_1.AUTH_HOSTNAME;
        }
        this.apiClient = new api_fetch_client_1.ApiFetchClient({
            hostname: authenticationUrl,
            requestPlugins: [basicAuthenticationPlugin],
        });
    }
    async getOAuth2Token() {
        if (this.isTokenValid()) {
            return this.buildAuthorizationHeader();
        }
        const oauth2Api = new oauth2_api_1.OAuth2Api(this.apiClient);
        try {
            const response = await oauth2Api.postAccessToken();
            if (response.access_token) {
                this.token = {
                    value: response.access_token,
                    status: TokenStatus.VALID,
                };
                return this.buildAuthorizationHeader();
            }
            else {
                this.token = {
                    value: '',
                    status: TokenStatus.INVALID,
                };
                console.error('No access_token has been returned. Response = ' + JSON.stringify(response));
                return {};
            }
        }
        catch (e) {
            this.token = {
                value: '',
                status: TokenStatus.INVALID,
            };
            console.error('An error occurred when trying to get the authentication token - ' + e);
            return {};
        }
    }
    buildAuthorizationHeader() {
        return { Authorization: `Bearer ${this.token.value}` };
    }
    isTokenValid() {
        return (this.token
            && this.token.status === TokenStatus.VALID
            && this.token.value.trim().length > 0);
    }
    load() {
        return {
            transform: new additional_headers_1.AdditionalHeadersRequest({
                headers: this.getOAuth2Token(),
            }).load().transform,
        };
    }
    invalidateToken() {
        this.token = undefined;
    }
}
exports.Oauth2TokenRequest = Oauth2TokenRequest;
var TokenStatus;
(function (TokenStatus) {
    TokenStatus[TokenStatus["INVALID"] = 0] = "INVALID";
    TokenStatus[TokenStatus["VALID"] = 1] = "VALID";
})(TokenStatus || (TokenStatus = {}));
//# sourceMappingURL=oauth2-token.request.js.map