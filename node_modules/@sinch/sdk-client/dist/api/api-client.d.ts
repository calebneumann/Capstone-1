/// <reference types="node" />
import { RequestBody, RequestOptions } from '../plugins/core/request-plugin';
import { ApiClientOptions } from './api-client-options';
import FormData = require('form-data');
export declare enum PaginationEnum {
    NONE = 0,
    /** Used by the Numbers API */
    TOKEN = 1,
    /** used by the SMS API */
    PAGE = 2,
    /** used by the Elastic SIP Trunking API */
    PAGE2 = 3,
    /** used by the Fax API */
    PAGE3 = 4
}
export interface ApiListPromise<T> extends Promise<PageResult<T>>, AsyncIterableIterator<T> {
}
export type PageResult<T> = {
    data: Array<T>;
    hasNextPage: boolean;
    nextPageValue: string;
    nextPage: () => ApiListPromise<T>;
};
export type AutoPaginationMethods<T> = {
    next: () => Promise<IteratorResult<T>>;
    return: () => void;
    [Symbol.asyncIterator]: () => AutoPaginationMethods<T>;
};
export interface ApiCallParameters {
    url: string;
    requestOptions: RequestOptions;
    apiName: string;
    operationId: string;
    circuitBreaker?: number;
}
export interface ApiCallParametersWithPagination extends ApiCallParameters {
    pagination: PaginationEnum;
    dataKey: string;
    requestOptionsPromise?: Promise<RequestOptions>;
}
export interface PaginatedApiProperties {
    /** Type of pagination: can be TOKEN or PAGE */
    pagination: PaginationEnum;
    /** Name of the API - for logging purposes */
    apiName: string;
    /** Operation identifier - for logging purposes */
    operationId: string;
    /** Name of the property holding the array of paginated data */
    dataKey: string;
}
export interface FileBuffer {
    /** Name of the file extracted from the 'content-disposition' header */
    fileName: string;
    /** File content as Buffer */
    buffer: Buffer;
}
/**
 * API Client used to call the server
 */
export declare class ApiClient {
    /** Options for the API */
    apiClientOptions: ApiClientOptions;
    constructor(options: ApiClientOptions);
    /**
     * Returns a map containing the query parameters based on the provided data and names.
     *
     * @param {Object} data - The data object from which to extract query parameters.
     * @param {Array.<string>} names - An array of keys (property names) to extract from the data object.
     * @return {Object} A map containing the extracted query parameters.
     */
    extractQueryParams<T extends {
        [key: string]: any;
    }>(data: T, names: (keyof T)[]): {
        [p in keyof T]: string;
    };
    /**
     * Asynchronously prepares options for an HTTP request.
     *
     * @param {string} url - The URL for the HTTP request.
     * @param {string} method - The HTTP method for the request (e.g., 'GET', 'POST').
     * @param {Object.<string, (string | undefined)>} queryParams - An object representing query parameters.
     * @param {Object.<string, (string | undefined)>} headers - An object representing headers.
     * @param {RequestBody} [body] - The request body, if applicable.
     * @param {string} [path] - An optional path for the request.
     * @return {Promise<RequestOptions>} A promise that resolves to the prepared options for the HTTP request.
     */
    prepareOptions(url: string, method: string, queryParams: {
        [key: string]: string | undefined;
    }, headers: {
        [key: string]: string | undefined;
    }, body?: RequestBody, path?: string): Promise<RequestOptions>;
    /**
     * Prepares the url to be called by appending query parameters.
     *
     * @param {string} url - The base url to be used.
     * @param {Object.<string, string|undefined>} queryParameters - Key-value pair with the parameters. If the value is undefined, the key is dropped.
     * @param {boolean} repeatParamArray - create as many single parameters with each value of the array
     * @return {string} The prepared URL as a string.
     */
    prepareUrl(url: string, queryParameters?: {
        [key: string]: string | undefined;
    }, repeatParamArray?: boolean): string;
    /**
     *
     * @param {string} name - The parameter name
     * @param {Object.<string, string|undefined>} queryParameters - Key-value pair with the parameters. If the value is undefined, the key is dropped.
     * @param {boolean}repeatParamArray - Create as many single parameters with each value of the array
     * @return {string} The query parameter formatted as required by the API
     */
    private formatQueryParameter;
    /**
     * Process HTTP call
     * @abstract
     * @template T
     * @param {ApiCallParameters} _httpCallParameters - Parameters for the HTTP call.
     * @return {Promise<T>} A promise that resolves to the result of the HTTP call.
     */
    processCall<T>(_httpCallParameters: ApiCallParameters): Promise<T>;
    /**
     * Process HTTP call with Pagination
     * @abstract
     * @template T
     * @param {ApiCallParametersWithPagination} _httpCallParameters - Parameters for the HTTP call.
     * @return {Promise<T>} A promise that resolves to the result of the HTTP call.
     */
    processCallWithPagination<T>(_httpCallParameters: ApiCallParametersWithPagination): Promise<PageResult<T>>;
    /**
     * Process HTTP call to download a PDF file
     * @abstract
     * @template T
     * @param {ApiCallParameters} _httpCallParameters - Parameters for the HTTP call.
     * @return {Promise<T>} A promise that resolves to the result of the HTTP call.
     */
    processFileCall(_httpCallParameters: ApiCallParameters): Promise<FileBuffer>;
    /**
     * Receives an object containing key/value pairs
     * Encodes this object to match application/x-www-urlencoded or multipart/form-data
     * @abstract
     * @param {any} _data
     * @param {string} _type
     */
    processFormData(_data: any, _type: string): FormData | string;
}
