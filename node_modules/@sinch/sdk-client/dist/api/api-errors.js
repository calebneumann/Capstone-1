"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ResponseJSONParseError = exports.EmptyResponseError = exports.RequestFailedError = exports.GenericError = void 0;
/**
 * Generic error class
 */
class GenericError extends Error {
    constructor(message, errorContext) {
        const baseUrl = GenericError.formatUrl(errorContext.url);
        const origin = GenericError.formatUrl(errorContext.origin);
        super(`[SDK] [apiName: ${errorContext.apiName || 'unknown'}]
        [operationId: ${errorContext.operationId || 'unknown'}] 
        [baseUrl: ${baseUrl}] [origin: ${origin}] [errorType: SDK] ${message}`);
    }
    static formatUrl(url) {
        const httpRegexp = /^https?:\/\//;
        return url ? url.replace(httpRegexp, '') : 'unknown';
    }
}
exports.GenericError = GenericError;
/**
 * Request failed error class
 */
class RequestFailedError extends GenericError {
    constructor(message, statusCode, errorContext, data) {
        super(`[status: ${statusCode}] ${message}`, errorContext);
        this.statusCode = statusCode;
        this.data = JSON.stringify(data, null, 2);
    }
}
exports.RequestFailedError = RequestFailedError;
/**
 * Empty response error class
 */
class EmptyResponseError extends GenericError {
    constructor(message, errorContext, data) {
        super(`[Empty response] ${message}`, errorContext);
        this.data = JSON.stringify(data, null, 2);
    }
}
exports.EmptyResponseError = EmptyResponseError;
/**
 * Response parse error class
 */
class ResponseJSONParseError extends RequestFailedError {
    constructor(message, httpStatus, errorContext, bodyContent) {
        super(`[Response JSON parse error] ${message}`, httpStatus, errorContext, bodyContent);
    }
}
exports.ResponseJSONParseError = ResponseJSONParseError;
//# sourceMappingURL=api-errors.js.map