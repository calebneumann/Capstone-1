/// <reference types="node" />
import { IncomingHttpHeaders } from 'http';
import { RequestBody } from '../plugins/core/request-plugin';
/**
 * Generate authorization header for application-signed requests (Verification and Voice)
 * @param {string} httpVerb - request's HTTP method
 * @param {RequestBody | undefined} body - request's body (undefined in case of GET request)
 * @param {string} contentType - content-type header value
 * @param {string} canonicalizedHeaders - x-timestamp header
 * @param {string} canonicalizedResource - request's path
 * @param {string} applicationKey - application key (from dashboard)
 * @param {string} applicationSecret - application secret (from dashboard)
 * @return {string} - Application signed header value for HTTP authorization header
 */
export declare const generateAuthorizationHeader: (httpVerb: string, body: RequestBody | undefined, contentType: string, canonicalizedHeaders: string, canonicalizedResource: string, applicationKey: string, applicationSecret: string) => string;
/**
 * Validate webhook signature headers for Conversation callback.
 * @param {string} secret - secret associated to the Conversation app
 * @param {IncomingHttpHeaders} headers - Incoming request's headers
 * @param {any} body - Incoming request's body
 * @return {boolean} - true if the signature header is valid
 */
export declare const validateWebhookSignature: (secret: string, headers: IncomingHttpHeaders, body: any) => boolean;
/**
 * Validate authorization header for callback request on application-signed protected endpoints (Verification and Voice webhooks)
 * @param {string} applicationKey - application key (from dashboard) related to the event
 * @param {string} applicationSecret - application secret (from dashboard) related to the event
 * @param {IncomingHttpHeaders} headers - Incoming request's headers
 * @param {any} body - Incoming request's body
 * @param {string} path - Incoming request's path
 * @param {string} method - Incoming request's HTTP method
 * @return {boolean} - true if the authorization header is valid
 */
export declare const validateAuthenticationHeader: (applicationKey: string, applicationSecret: string, headers: IncomingHttpHeaders, body: any, path: string, method: string) => boolean;
/**
 * Validate signature headers for Numbers callback. Note: a callbackURL must be associated to the number
 * @param {string} callbackSecret - secret associated to the rented number
 * @param {IncomingHttpHeaders} headers - Incoming request's headers
 * @param {any} body - Incoming request's body
 * @return {boolean} - true if the signature header is valid
 */
export declare const validateSignatureHeader: (callbackSecret: string, headers: IncomingHttpHeaders, body: any) => boolean;
export declare const computeSignedData: (body: string, nonce: string, timestamp: string) => string;
export declare const calculateWebhookSignature: (signedData: string, secret: string) => string;
export declare const calculateMD5: (body: string) => string;
export declare const calculateSignature: (secret: string, stringToSign: string) => string;
