"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.listSectionHelper = exports.templateV2Helper = exports.templateV1Helper = exports.messageBuilder = void 0;
exports.messageBuilder = {
    card: (cardMessageItem) => {
        return {
            card_message: cardMessageItem,
        };
    },
    carousel: (carouselMessageItem) => {
        return {
            carousel_message: carouselMessageItem,
        };
    },
    choice: (choiceMessageItem) => {
        return {
            choice_message: choiceMessageItem,
        };
    },
    contactInfo: (contactInfoMessageItem) => {
        return {
            contact_info_message: contactInfoMessageItem,
        };
    },
    list: (listMessageItem) => {
        return {
            list_message: listMessageItem,
        };
    },
    location: (locationMessageItem) => {
        return {
            location_message: locationMessageItem,
        };
    },
    media: (mediaMessageItem) => {
        return {
            media_message: mediaMessageItem,
        };
    },
    template: (templateMessageItem) => {
        return {
            template_message: templateMessageItem,
        };
    },
    text: (textMessageItem) => {
        return {
            text_message: textMessageItem,
        };
    },
};
exports.templateV1Helper = {
    buildTextMessageContent: (textMessageItem) => {
        return JSON.stringify(exports.messageBuilder.text(textMessageItem));
    },
    buildCardMessageContent: (cardMessageItem) => {
        return JSON.stringify(exports.messageBuilder.card(cardMessageItem));
    },
    buildCarouselMessageContent: (carouselMessageItem) => {
        return JSON.stringify(exports.messageBuilder.carousel(carouselMessageItem));
    },
    buildChoiceMessageContent: (choiceMessageItem) => {
        return JSON.stringify(exports.messageBuilder.choice(choiceMessageItem));
    },
    buildContactInfoMessageContent: (contactInfoMessageItem) => {
        return JSON.stringify(exports.messageBuilder.contactInfo(contactInfoMessageItem));
    },
    buildLocationMessageContent: (locationMessageItem) => {
        return JSON.stringify(exports.messageBuilder.location(locationMessageItem));
    },
    buildMediaMessageContent: (mediaMessageItem) => {
        return JSON.stringify(exports.messageBuilder.media(mediaMessageItem));
    },
    buildTemplateMessageContent: (templateMessageItem) => {
        return JSON.stringify(exports.messageBuilder.template(templateMessageItem));
    },
    buildListMessageContent: (listMessageItem) => {
        return JSON.stringify(exports.messageBuilder.list(listMessageItem));
    },
};
exports.templateV2Helper = {
    // Template V2
    buildTextMessageContent: (textMessageItem) => {
        return exports.messageBuilder.text(textMessageItem);
    },
    buildCardMessageContent: (cardMessageItem) => {
        return exports.messageBuilder.card(cardMessageItem);
    },
    buildCarouselMessageContent: (carouselMessageItem) => {
        return exports.messageBuilder.carousel(carouselMessageItem);
    },
    buildChoiceMessageContent: (choiceMessageItem) => {
        return exports.messageBuilder.choice(choiceMessageItem);
    },
    buildContactInfoMessageContent: (contactInfoMessageItem) => {
        return exports.messageBuilder.contactInfo(contactInfoMessageItem);
    },
    buildLocationMessageContent: (locationMessageItem) => {
        return exports.messageBuilder.location(locationMessageItem);
    },
    buildMediaMessageContent: (mediaMessageItem) => {
        return exports.messageBuilder.media(mediaMessageItem);
    },
    buildTemplateMessageContent: (templateMessageItem) => {
        return exports.messageBuilder.template(templateMessageItem);
    },
    buildListMessageContent: (listMessageItem) => {
        return exports.messageBuilder.list(listMessageItem);
    },
    getMessageFromTranslation: (translation) => {
        if ('card_message' in translation) {
            return {
                type: "CardMessage" /* MessageType.CARD */,
                content: translation.card_message,
            };
        }
        else if ('carousel_message' in translation) {
            return {
                type: "CarouselMessage" /* MessageType.CAROUSEL */,
                content: translation.carousel_message,
            };
        }
        else if ('choice_message' in translation) {
            return {
                type: "ChoiceMessage" /* MessageType.CHOICE */,
                content: translation.choice_message,
            };
        }
        else if ('contact_info_message' in translation) {
            return {
                type: "ContactInfoMessage" /* MessageType.CONTACT_INFO */,
                content: translation.contact_info_message,
            };
        }
        else if ('list_message' in translation) {
            return {
                type: "ListMessage" /* MessageType.LIST */,
                content: translation.list_message,
            };
        }
        else if ('location_message' in translation) {
            return {
                type: "LocationMessage" /* MessageType.LOCATION */,
                content: translation.location_message,
            };
        }
        else if ('media_message' in translation) {
            return {
                type: "MediaMessage" /* MessageType.MEDIA */,
                content: translation.media_message,
            };
        }
        else if ('template_message' in translation) {
            return {
                type: "TemplateMessage" /* MessageType.TEMPLATE */,
                content: translation.template_message,
            };
        }
        else if ('text_message' in translation) {
            return {
                type: "TextMessage" /* MessageType.TEXT */,
                content: translation.text_message,
            };
        }
        else {
            return {
                type: "Undefined" /* MessageType.UNDEFINED */,
                content: '',
            };
        }
    },
    getPreviousTranslations: (translations) => {
        if (!translations) {
            return [];
        }
        else {
            return translations.filter((translation) => translation.version !== 'latest');
        }
    },
};
exports.listSectionHelper = {
    buildChoiceItem: (choiceItem) => {
        return {
            choice: choiceItem,
        };
    },
    buildProductItem: (productItem) => {
        return {
            product: productItem,
        };
    },
};
//# sourceMappingURL=helper.js.map