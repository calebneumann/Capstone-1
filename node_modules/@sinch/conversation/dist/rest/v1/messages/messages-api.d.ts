import { ApiListPromise, SinchClientParameters } from '@sinch/sdk-client';
import { ConversationMessage, DeleteMessageRequestData, GetMessageRequestData, ListMessagesRequestData, Recipient, SendCardMessageRequestData, SendCarouselMessageRequestData, SendChoiceMessageRequestData, SendContactInfoMessageRequestData, SendListMessageRequestData, SendLocationMessageRequestData, SendMediaMessageRequestData, SendMessageRequest, SendMessageRequestData, SendMessageResponse, SendTemplateMessageRequestData, SendTextMessageRequestData, UpdateMessageRequestData } from '../../../models';
import { ConversationDomainApi } from '../conversation-domain-api';
export declare class MessagesApi extends ConversationDomainApi {
    /**
     * Initialize your interface
     *
     * @param {SinchClientParameters} sinchClientParameters - The parameters used to initialize the API Client.
     */
    constructor(sinchClientParameters: SinchClientParameters);
    /**
     * Delete a message
     * Delete a specific message by its ID.  Note: Removing all messages of a conversation will not automatically delete the conversation.
     * @param { DeleteMessageRequestData } data - The data to provide to the API call.
     */
    delete(data: DeleteMessageRequestData): Promise<any>;
    /**
     * Get a message
     * Retrieves a specific message by its ID.
     * @param { GetMessageRequestData } data - The data to provide to the API call.
     */
    get(data: GetMessageRequestData): Promise<ConversationMessage>;
    /**
     * List messages
     * This operation lists all messages sent or received via particular [Processing Modes](../../../../../conversation/processing-modes/).  Setting the &#x60;messages_source&#x60; parameter to &#x60;CONVERSATION_SOURCE&#x60; allows for querying messages in &#x60;CONVERSATION&#x60; mode, and setting it to &#x60;DISPATCH_SOURCE&#x60; will allow for queries of messages in &#x60;DISPATCH&#x60; mode.  Combining multiple parameters is supported for more detailed filtering of messages, but some of them are not supported depending on the value specified for &#x60;messages_source&#x60;. The description for each field will inform if that field may not be supported.  The messages are ordered by their &#x60;accept_time&#x60; property in descending order, where &#x60;accept_time&#x60; is a timestamp of when the message was enqueued by the Conversation API. This means messages received most recently will be listed first.
     * @param { ListMessagesRequestData } data - The data to provide to the API call.
     * @return {ApiListPromise<ConversationMessage>}
     */
    list(data: ListMessagesRequestData): ApiListPromise<ConversationMessage>;
    /**
     * Send a message
     * You can send a message from a Conversation app to a contact associated with that app. If the recipient is not associated with an existing contact, a new contact will be created.  The message is added to the active conversation with the contact if a conversation already exists. If no active conversation exists a new one is started automatically.  You can find all of your IDs and authentication credentials on the [Sinch Customer Dashboard](https://dashboard.sinch.com/convapi/overview).
     * @param { SendCardMessageRequestData<Recipient> } data - The data to provide to the API call.
     */
    send(data: SendMessageRequestData<Recipient>): Promise<SendMessageResponse>;
    /**
     * Send a card message
     * You can send a message from a Conversation app to a contact associated with that app. If the recipient is not associated with an existing contact, a new contact will be created.  The message is added to the active conversation with the contact if a conversation already exists. If no active conversation exists a new one is started automatically.  You can find all of your IDs and authentication credentials on the [Sinch Customer Dashboard](https://dashboard.sinch.com/convapi/overview).
     * @param { SendCardMessageRequestData<Recipient> } data - The data to provide to the API call.
     */
    sendCardMessage(data: SendCardMessageRequestData<Recipient>): Promise<SendMessageResponse>;
    /**
     * Send a carousel message
     * You can send a message from a Conversation app to a contact associated with that app. If the recipient is not associated with an existing contact, a new contact will be created.  The message is added to the active conversation with the contact if a conversation already exists. If no active conversation exists a new one is started automatically.  You can find all of your IDs and authentication credentials on the [Sinch Customer Dashboard](https://dashboard.sinch.com/convapi/overview).
     * @param { SendCarouselMessageRequestData<Recipient> } data - The data to provide to the API call.
     */
    sendCarouselMessage(data: SendCarouselMessageRequestData<Recipient>): Promise<SendMessageResponse>;
    /**
     * Send a choice message
     * You can send a message from a Conversation app to a contact associated with that app. If the recipient is not associated with an existing contact, a new contact will be created.  The message is added to the active conversation with the contact if a conversation already exists. If no active conversation exists a new one is started automatically.  You can find all of your IDs and authentication credentials on the [Sinch Customer Dashboard](https://dashboard.sinch.com/convapi/overview).
     * @param { SendChoiceMessageRequestData<Recipient> } data - The data to provide to the API call.
     */
    sendChoiceMessage(data: SendChoiceMessageRequestData<Recipient>): Promise<SendMessageResponse>;
    /**
     * Send a contact info message
     * You can send a message from a Conversation app to a contact associated with that app. If the recipient is not associated with an existing contact, a new contact will be created.  The message is added to the active conversation with the contact if a conversation already exists. If no active conversation exists a new one is started automatically.  You can find all of your IDs and authentication credentials on the [Sinch Customer Dashboard](https://dashboard.sinch.com/convapi/overview).
     * @param { SendContactInfoMessageRequestData<Recipient> } data - The data to provide to the API call.
     */
    sendContactInfoMessage(data: SendContactInfoMessageRequestData<Recipient>): Promise<SendMessageResponse>;
    /**
     * Send a list message
     * You can send a message from a Conversation app to a contact associated with that app. If the recipient is not associated with an existing contact, a new contact will be created.  The message is added to the active conversation with the contact if a conversation already exists. If no active conversation exists a new one is started automatically.  You can find all of your IDs and authentication credentials on the [Sinch Customer Dashboard](https://dashboard.sinch.com/convapi/overview).
     * @param { SendListMessageRequestData<Recipient> } data - The data to provide to the API call.
     */
    sendListMessage(data: SendListMessageRequestData<Recipient>): Promise<SendMessageResponse>;
    /**
     * Send a location message
     * You can send a message from a Conversation app to a contact associated with that app. If the recipient is not associated with an existing contact, a new contact will be created.  The message is added to the active conversation with the contact if a conversation already exists. If no active conversation exists a new one is started automatically.  You can find all of your IDs and authentication credentials on the [Sinch Customer Dashboard](https://dashboard.sinch.com/convapi/overview).
     * @param { SendLocationMessageRequestData<Recipient> } data - The data to provide to the API call.
     */
    sendLocationMessage(data: SendLocationMessageRequestData<Recipient>): Promise<SendMessageResponse>;
    /**
     * Send a media message
     * You can send a message from a Conversation app to a contact associated with that app. If the recipient is not associated with an existing contact, a new contact will be created.  The message is added to the active conversation with the contact if a conversation already exists. If no active conversation exists a new one is started automatically.  You can find all of your IDs and authentication credentials on the [Sinch Customer Dashboard](https://dashboard.sinch.com/convapi/overview).
     * @param { SendCardMessageRequestData<Recipient> } data - The data to provide to the API call.
     */
    sendMediaMessage(data: SendMediaMessageRequestData<Recipient>): Promise<SendMessageResponse>;
    /**
     * Send a template message
     * You can send a message from a Conversation app to a contact associated with that app. If the recipient is not associated with an existing contact, a new contact will be created.  The message is added to the active conversation with the contact if a conversation already exists. If no active conversation exists a new one is started automatically.  You can find all of your IDs and authentication credentials on the [Sinch Customer Dashboard](https://dashboard.sinch.com/convapi/overview).
     * @param { SendCardMessageRequestData<Recipient> } data - The data to provide to the API call.
     */
    sendTemplateMessage(data: SendTemplateMessageRequestData<Recipient>): Promise<SendMessageResponse>;
    /**
     * Send a text message
     * You can send a message from a Conversation app to a contact associated with that app. If the recipient is not associated with an existing contact, a new contact will be created.  The message is added to the active conversation with the contact if a conversation already exists. If no active conversation exists a new one is started automatically.  You can find all of your IDs and authentication credentials on the [Sinch Customer Dashboard](https://dashboard.sinch.com/convapi/overview).
     * @param { SendTextMessageRequestData<Recipient> } data - The data to provide to the API call.
     */
    sendTextMessage(data: SendTextMessageRequestData<Recipient>): Promise<SendMessageResponse>;
    private sendMessage;
    performSendMessageRequestBodyTransformation(body: SendMessageRequest<Recipient>): SendMessageRequest<Recipient>;
    /**
     * Update message metadata
     * Update a specific message metadata by its ID.
     * @param { UpdateMessageRequestData } data - The data to provide to the API call.
     */
    update(data: UpdateMessageRequestData): Promise<ConversationMessage>;
}
