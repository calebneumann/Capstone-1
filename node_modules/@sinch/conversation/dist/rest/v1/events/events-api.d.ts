import { ApiListPromise, SinchClientParameters } from '@sinch/sdk-client';
import { ConversationEvent, DeleteEventRequestData, GetEventRequestData, ListEventsRequestData, Recipient, SendAgentJoinedEventRequestData, SendAgentLeftEventRequestData, SendCommentReplyEventRequestData, SendComposingEndEventRequestData, SendComposingEventRequestData, SendEventRequestData, SendEventResponse, SendGenericEventRequestData } from '../../../models';
import { ConversationDomainApi } from '../conversation-domain-api';
export declare class EventsApi extends ConversationDomainApi {
    /**
     * Initialize your interface
     *
     * @param {SinchClientParameters} sinchClientParameters - The parameters used to initialize the API Client.
     */
    constructor(sinchClientParameters: SinchClientParameters);
    /**
     * Delete an event
     * Delete a specific event by its ID.
     * @param { DeleteEventRequestData } data - The data to provide to the API call.
     */
    delete(data: DeleteEventRequestData): Promise<any>;
    /**
     * Get an event
     * Get event from ID
     * @param { GetEventRequestData } data - The data to provide to the API call.
     */
    get(data: GetEventRequestData): Promise<ConversationEvent>;
    /**
     * List events
     * List all events in a project
     * @param { ListEventsRequestData } data - The data to provide to the API call.
     * @return {ApiListPromise<ConversationEvent>}
     */
    list(data: ListEventsRequestData): ApiListPromise<ConversationEvent>;
    /**
     * Send an event
     * Sends an event to the referenced contact from the referenced app. Note that this operation enqueues the event in a queue so a successful response only indicates that the event has been queued.
     * @param { SendEventRequestData<Recipient> } data - The data to provide to the API call.
     */
    send(data: SendEventRequestData<Recipient>): Promise<SendEventResponse>;
    /**
     * Send a composing event
     * Sends an event to the referenced contact from the referenced app. Note that this operation enqueues the event in a queue so a successful response only indicates that the event has been queued.
     * @param { SendComposingEventRequestData<Recipient> } data - The data to provide to the API call.
     */
    sendComposingEvent(data: SendComposingEventRequestData<Recipient>): Promise<SendEventResponse>;
    /**
     * Send a composing end event
     * Sends an event to the referenced contact from the referenced app. Note that this operation enqueues the event in a queue so a successful response only indicates that the event has been queued.
     * @param { SendComposingEndEventRequestData<Recipient> } data - The data to provide to the API call.
     */
    sendComposingEndEvent(data: SendComposingEndEventRequestData<Recipient>): Promise<SendEventResponse>;
    /**
     * Send a composing reply event
     * Sends an event to the referenced contact from the referenced app. Note that this operation enqueues the event in a queue so a successful response only indicates that the event has been queued.
     * @param {SendCommentReplyEventRequestData<Recipient>} data - The data to provide to the API call.
     */
    sendCommentReplyEvent(data: SendCommentReplyEventRequestData<Recipient>): Promise<SendEventResponse>;
    /**
     * Send an agent joined event
     * Sends an event to the referenced contact from the referenced app. Note that this operation enqueues the event in a queue so a successful response only indicates that the event has been queued.
     * @param {SendAgentJoinedEventRequestData} data - The data to provide to the API call.
     */
    sendAgentJoinedEvent(data: SendAgentJoinedEventRequestData<Recipient>): Promise<SendEventResponse>;
    /**
     * Send an agent left event
     * Sends an event to the referenced contact from the referenced app. Note that this operation enqueues the event in a queue so a successful response only indicates that the event has been queued.
     * @param {SendAgentLeftEventRequestData<Recipient>} data - The data to provide to the API call.
     */
    sendAgentLeftEvent(data: SendAgentLeftEventRequestData<Recipient>): Promise<SendEventResponse>;
    /**
     * Send a generic event
     * Sends an event to the referenced contact from the referenced app. Note that this operation enqueues the event in a queue so a successful response only indicates that the event has been queued.
     * @param {SendGenericEventRequestData<Recipient>} data - The data to provide to the API call.
     */
    sendGenericEvent(data: SendGenericEventRequestData<Recipient>): Promise<SendEventResponse>;
    private sendEvent;
}
