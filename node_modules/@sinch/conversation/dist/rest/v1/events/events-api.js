"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventsApi = void 0;
const sdk_client_1 = require("@sinch/sdk-client");
const conversation_domain_api_1 = require("../conversation-domain-api");
class EventsApi extends conversation_domain_api_1.ConversationDomainApi {
    /**
     * Initialize your interface
     *
     * @param {SinchClientParameters} sinchClientParameters - The parameters used to initialize the API Client.
     */
    constructor(sinchClientParameters) {
        super(sinchClientParameters, 'EventsApi');
    }
    /**
     * Delete an event
     * Delete a specific event by its ID.
     * @param { DeleteEventRequestData } data - The data to provide to the API call.
     */
    async delete(data) {
        this.client = this.getSinchClient();
        const getParams = this.client.extractQueryParams(data, []);
        const headers = {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
        };
        const body = '';
        const basePathUrl = `${this.client.apiClientOptions.hostname}/v1/projects/${this.client.apiClientOptions.projectId}/events/${data['event_id']}`;
        const requestOptions = await this.client.prepareOptions(basePathUrl, 'DELETE', getParams, headers, body || undefined);
        const url = this.client.prepareUrl(requestOptions.hostname, requestOptions.queryParams);
        return this.client.processCall({
            url,
            requestOptions,
            apiName: this.apiName,
            operationId: 'DeleteEvents',
        });
    }
    /**
     * Get an event
     * Get event from ID
     * @param { GetEventRequestData } data - The data to provide to the API call.
     */
    async get(data) {
        this.client = this.getSinchClient();
        const getParams = this.client.extractQueryParams(data, []);
        const headers = {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
        };
        const body = '';
        const basePathUrl = `${this.client.apiClientOptions.hostname}/v1/projects/${this.client.apiClientOptions.projectId}/events/${data['event_id']}`;
        const requestOptions = await this.client.prepareOptions(basePathUrl, 'GET', getParams, headers, body || undefined);
        const url = this.client.prepareUrl(requestOptions.hostname, requestOptions.queryParams);
        return this.client.processCall({
            url,
            requestOptions,
            apiName: this.apiName,
            operationId: 'GetEvent',
        });
    }
    /**
     * List events
     * List all events in a project
     * @param { ListEventsRequestData } data - The data to provide to the API call.
     * @return {ApiListPromise<ConversationEvent>}
     */
    list(data) {
        this.client = this.getSinchClient();
        const getParams = this.client.extractQueryParams(data, [
            'conversation_id',
            'contact_id',
            'page_size',
            'page_token',
        ]);
        const headers = {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
        };
        const body = '';
        const basePathUrl = `${this.client.apiClientOptions.hostname}/v1/projects/${this.client.apiClientOptions.projectId}/events`;
        const requestOptionsPromise = this.client.prepareOptions(basePathUrl, 'GET', getParams, headers, body || undefined);
        const operationProperties = {
            pagination: sdk_client_1.PaginationEnum.TOKEN,
            apiName: this.apiName,
            operationId: 'ListEvents',
            dataKey: 'events',
        };
        // Create the promise containing the response wrapped as a PageResult
        const listPromise = (0, sdk_client_1.buildPageResultPromise)(this.client, requestOptionsPromise, operationProperties);
        // Add properties to the Promise to offer the possibility to use it as an iterator
        Object.assign(listPromise, (0, sdk_client_1.createIteratorMethodsForPagination)(this.client, requestOptionsPromise, listPromise, operationProperties));
        return listPromise;
    }
    /**
     * Send an event
     * Sends an event to the referenced contact from the referenced app. Note that this operation enqueues the event in a queue so a successful response only indicates that the event has been queued.
     * @param { SendEventRequestData<Recipient> } data - The data to provide to the API call.
     */
    async send(data) {
        return this.sendEvent(data, 'SendEvent');
    }
    /**
     * Send a composing event
     * Sends an event to the referenced contact from the referenced app. Note that this operation enqueues the event in a queue so a successful response only indicates that the event has been queued.
     * @param { SendComposingEventRequestData<Recipient> } data - The data to provide to the API call.
     */
    async sendComposingEvent(data) {
        return this.sendEvent(data, 'SendComposingEvent');
    }
    /**
     * Send a composing end event
     * Sends an event to the referenced contact from the referenced app. Note that this operation enqueues the event in a queue so a successful response only indicates that the event has been queued.
     * @param { SendComposingEndEventRequestData<Recipient> } data - The data to provide to the API call.
     */
    async sendComposingEndEvent(data) {
        return this.sendEvent(data, 'SendComposingEndEvent');
    }
    /**
     * Send a composing reply event
     * Sends an event to the referenced contact from the referenced app. Note that this operation enqueues the event in a queue so a successful response only indicates that the event has been queued.
     * @param {SendCommentReplyEventRequestData<Recipient>} data - The data to provide to the API call.
     */
    async sendCommentReplyEvent(data) {
        return this.sendEvent(data, 'SendCommentReplyEvent');
    }
    /**
     * Send an agent joined event
     * Sends an event to the referenced contact from the referenced app. Note that this operation enqueues the event in a queue so a successful response only indicates that the event has been queued.
     * @param {SendAgentJoinedEventRequestData} data - The data to provide to the API call.
     */
    async sendAgentJoinedEvent(data) {
        return this.sendEvent(data, 'SendAgentJoinedEvent');
    }
    /**
     * Send an agent left event
     * Sends an event to the referenced contact from the referenced app. Note that this operation enqueues the event in a queue so a successful response only indicates that the event has been queued.
     * @param {SendAgentLeftEventRequestData<Recipient>} data - The data to provide to the API call.
     */
    async sendAgentLeftEvent(data) {
        return this.sendEvent(data, 'SendAgentLeftEvent');
    }
    /**
     * Send a generic event
     * Sends an event to the referenced contact from the referenced app. Note that this operation enqueues the event in a queue so a successful response only indicates that the event has been queued.
     * @param {SendGenericEventRequestData<Recipient>} data - The data to provide to the API call.
     */
    async sendGenericEvent(data) {
        return this.sendEvent(data, 'SendGenericEvent');
    }
    async sendEvent(data, operationId) {
        this.client = this.getSinchClient();
        const getParams = this.client.extractQueryParams(data, []);
        const headers = {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
        };
        const body = data['sendEventRequestBody']
            ? JSON.stringify(data['sendEventRequestBody'])
            : '{}';
        const basePathUrl = `${this.client.apiClientOptions.hostname}/v1/projects/${this.client.apiClientOptions.projectId}/events:send`;
        const requestOptions = await this.client.prepareOptions(basePathUrl, 'POST', getParams, headers, body || undefined);
        const url = this.client.prepareUrl(requestOptions.hostname, requestOptions.queryParams);
        return this.client.processCall({
            url,
            requestOptions,
            apiName: this.apiName,
            operationId,
        });
    }
}
exports.EventsApi = EventsApi;
//# sourceMappingURL=events-api.js.map