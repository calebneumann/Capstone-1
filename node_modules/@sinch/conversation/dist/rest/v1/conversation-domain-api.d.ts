import { Api, ApiClient, ConversationRegion, SinchClientParameters, UnifiedCredentials } from '@sinch/sdk-client';
export declare class ConversationDomainApi implements Api {
    readonly apiName: string;
    client?: ApiClient;
    private sinchClientParameters;
    constructor(sinchClientParameters: SinchClientParameters, apiName: string);
    /**
     * Update the default hostname for the API
     * @param {string} hostname - The new hostname to use for the APIs.
     */
    setHostname(hostname: string): void;
    /**
     * Update the region in the basePath
     * @param {ConversationRegion} region - The new region to send the requests to
     */
    setRegion(region: ConversationRegion): void;
    /**
     * Updates the credentials used to authenticate API requests
     * @param {UnifiedCredentials} credentials
     */
    setCredentials(credentials: UnifiedCredentials): void;
    private resetApiClient;
    /**
     * Checks the configuration parameters are ok and initialize the API client. Once initialized, the same instance will
     * be returned for the subsequent API calls (singleton pattern)
     * @return {ApiClient} the API Client or throws an error in case the configuration parameters are not ok
     * @private
     */
    getSinchClient(): ApiClient;
    private buildHostname;
}
