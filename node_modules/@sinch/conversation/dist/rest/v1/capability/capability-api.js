"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CapabilityApi = void 0;
const conversation_domain_api_1 = require("../conversation-domain-api");
class CapabilityApi extends conversation_domain_api_1.ConversationDomainApi {
    /**
     * Initialize your interface
     *
     * @param {SinchClientParameters} sinchClientParameters - The parameters used to initialize the API Client.
     */
    constructor(sinchClientParameters) {
        super(sinchClientParameters, 'CapabilityApi');
    }
    /**
     * Capability lookup
     * This method is asynchronous - it immediately returns the requested Capability registration. Capability check is then delivered as a callback to registered webhooks with trigger CAPABILITY for every reachable channel.
     * @param { LookupCapabilityRequestData<Recipient> } data - The data to provide to the API call.
     */
    async lookup(data) {
        this.client = this.getSinchClient();
        const getParams = this.client.extractQueryParams(data, []);
        const headers = {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
        };
        const body = data['lookupCapabilityRequestBody']
            ? JSON.stringify(data['lookupCapabilityRequestBody'])
            : '{}';
        const basePathUrl = `${this.client.apiClientOptions.hostname}/v1/projects/${this.client.apiClientOptions.projectId}/capability:query`;
        const requestOptions = await this.client.prepareOptions(basePathUrl, 'POST', getParams, headers, body || undefined);
        const url = this.client.prepareUrl(requestOptions.hostname, requestOptions.queryParams);
        return this.client.processCall({
            url,
            requestOptions,
            apiName: this.apiName,
            operationId: 'QueryCapability',
        });
    }
}
exports.CapabilityApi = CapabilityApi;
//# sourceMappingURL=capability-api.js.map