"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TranscodingApi = void 0;
const conversation_domain_api_1 = require("../conversation-domain-api");
class TranscodingApi extends conversation_domain_api_1.ConversationDomainApi {
    /**
     * Initialize your interface
     *
     * @param {SinchClientParameters} sinchClientParameters - The parameters used to initialize the API Client.
     */
    constructor(sinchClientParameters) {
        super(sinchClientParameters, 'TranscodingApi');
    }
    /**
     * Transcode a message
     * Transcodes the message from the Conversation API format to the channel-specific formats for the requested channels. No message is sent to the contact.
     * @param { TranscodeMessageRequestData } data - The data to provide to the API call.
     */
    async transcodeMessage(data) {
        this.client = this.getSinchClient();
        const getParams = this.client.extractQueryParams(data, []);
        const headers = {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
        };
        const body = data['transcodeMessageRequestBody'] ? JSON.stringify(data['transcodeMessageRequestBody']) : '{}';
        const basePathUrl = `${this.client.apiClientOptions.hostname}/v1/projects/${this.client.apiClientOptions.projectId}/messages:transcode`;
        const requestOptions = await this.client.prepareOptions(basePathUrl, 'POST', getParams, headers, body || undefined);
        const url = this.client.prepareUrl(requestOptions.hostname, requestOptions.queryParams);
        return this.client.processCall({
            url,
            requestOptions,
            apiName: this.apiName,
            operationId: 'TranscodeMessage',
        });
    }
}
exports.TranscodingApi = TranscodingApi;
//# sourceMappingURL=transcoding-api.js.map