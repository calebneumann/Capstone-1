"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConversationService = void 0;
const contact_1 = require("./contact");
const app_1 = require("./app");
const events_1 = require("./events");
const messages_1 = require("./messages");
const transcoding_1 = require("./transcoding");
const capability_1 = require("./capability");
const conversation_1 = require("./conversation");
const webhooks_1 = require("./webhooks");
const templates_v1_1 = require("./templates-v1");
const templates_v2_1 = require("./templates-v2");
/**
 * The Conversation Service exposes the following APIs:
 *  - app
 *  - contact
 *  - capability
 *  - conversation
 *  - messages
 *  - events
 *  - transcoding
 *  - webhooks
 *  - templatesV1
 *  - templatesV2
 */
class ConversationService {
    /**
     * Create a new ConversationService instance with its configuration. It needs the following parameters for authentication:
     *  - `projectId`
     *  - `keyId`
     *  - `keySecret`
     *
     * Other supported properties:
     *  - `conversationRegion`
     *  - `conversationHostname`
     *  - `conversationTemplatesHostname`
     * @param {SinchClientParameters} params - an Object containing the necessary properties to initialize the service
     */
    constructor(params) {
        this.contact = new contact_1.ContactApi(params);
        this.app = new app_1.AppApi(params);
        this.events = new events_1.EventsApi(params);
        this.messages = new messages_1.MessagesApi(params);
        this.transcoding = new transcoding_1.TranscodingApi(params);
        this.capability = new capability_1.CapabilityApi(params);
        this.conversation = new conversation_1.ConversationApi(params);
        this.webhooks = new webhooks_1.WebhooksApi(params);
        this.templatesV1 = new templates_v1_1.TemplatesV1Api(params);
        this.templatesV2 = new templates_v2_1.TemplatesV2Api(params);
    }
    /**
     * Update the default hostname for each API (except Templates)
     * @param {string} hostname - The new hostname to use for all the APIs.
     */
    setHostname(hostname) {
        this.contact.setHostname(hostname);
        this.app.setHostname(hostname);
        this.events.setHostname(hostname);
        this.messages.setHostname(hostname);
        this.transcoding.setHostname(hostname);
        this.capability.setHostname(hostname);
        this.conversation.setHostname(hostname);
        this.webhooks.setHostname(hostname);
    }
    /**
     * Update the default hostname for the Templates APIs
     * @param {string} hostname - The new hostname to use for the Templates APIs.
     */
    setTemplatesHostname(hostname) {
        this.templatesV1.setHostname(hostname);
        this.templatesV2.setHostname(hostname);
    }
    /**
     * Update the current region for each API
     * @param {ConversationRegion} region - The new region to use in the production URL
     */
    setRegion(region) {
        this.contact.setRegion(region);
        this.app.setRegion(region);
        this.events.setRegion(region);
        this.messages.setRegion(region);
        this.transcoding.setRegion(region);
        this.capability.setRegion(region);
        this.conversation.setRegion(region);
        this.webhooks.setRegion(region);
        this.templatesV1.setRegion(region);
        this.templatesV2.setRegion(region);
    }
}
exports.ConversationService = ConversationService;
//# sourceMappingURL=conversation-service.js.map