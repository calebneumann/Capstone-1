"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TemplatesV2Api = void 0;
const conversation_domain_api_1 = require("../conversation-domain-api");
class TemplatesV2Api extends conversation_domain_api_1.ConversationDomainApi {
    /**
     * Initialize your interface
     *
     * @param {SinchClientParameters} sinchClientParameters - The parameters used to initialize the API Client.
     */
    constructor(sinchClientParameters) {
        super(sinchClientParameters, 'TemplatesV2Api');
    }
    /**
     * Creates a template
     *
     * @param { V2CreateTemplateRequestData } data - The data to provide to the API call.
     */
    async create(data) {
        this.client = this.getSinchClient();
        const getParams = this.client.extractQueryParams(data, []);
        const headers = {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
        };
        const body = data['createTemplateRequestBody'] ? JSON.stringify(data['createTemplateRequestBody']) : '{}';
        const basePathUrl = `${this.client.apiClientOptions.hostname}/v2/projects/${this.client.apiClientOptions.projectId}/templates`;
        const requestOptions = await this.client.prepareOptions(basePathUrl, 'POST', getParams, headers, body || undefined);
        const url = this.client.prepareUrl(requestOptions.hostname, requestOptions.queryParams);
        return this.client.processCall({
            url,
            requestOptions,
            apiName: this.apiName,
            operationId: 'V2CreateTemplate',
        });
    }
    /**
     * Delete a template.
     *
     * @param { V2DeleteTemplateRequestData } data - The data to provide to the API call.
     */
    async delete(data) {
        this.client = this.getSinchClient();
        const getParams = this.client.extractQueryParams(data, []);
        const headers = {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
        };
        const body = '';
        const basePathUrl = `${this.client.apiClientOptions.hostname}/v2/projects/${this.client.apiClientOptions.projectId}/templates/${data['template_id']}`;
        const requestOptions = await this.client.prepareOptions(basePathUrl, 'DELETE', getParams, headers, body || undefined);
        const url = this.client.prepareUrl(requestOptions.hostname, requestOptions.queryParams);
        return this.client.processCall({
            url,
            requestOptions,
            apiName: this.apiName,
            operationId: 'V2DeleteTemplate',
        });
    }
    /**
     * Get a template
     *
     * @param { V2GetTemplateRequestData } data - The data to provide to the API call.
     */
    async get(data) {
        this.client = this.getSinchClient();
        const getParams = this.client.extractQueryParams(data, []);
        const headers = {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
        };
        const body = '';
        const basePathUrl = `${this.client.apiClientOptions.hostname}/v2/projects/${this.client.apiClientOptions.projectId}/templates/${data['template_id']}`;
        const requestOptions = await this.client.prepareOptions(basePathUrl, 'GET', getParams, headers, body || undefined);
        const url = this.client.prepareUrl(requestOptions.hostname, requestOptions.queryParams);
        return this.client.processCall({
            url,
            requestOptions,
            apiName: this.apiName,
            operationId: 'V2GetTemplate',
        });
    }
    /**
     * List all templates belonging to a project ID.
     *
     * @param { V2ListTemplatesRequestData } data - The data to provide to the API call.
     */
    async list(data) {
        this.client = this.getSinchClient();
        const getParams = this.client.extractQueryParams(data, []);
        const headers = {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
        };
        const body = '';
        const basePathUrl = `${this.client.apiClientOptions.hostname}/v2/projects/${this.client.apiClientOptions.projectId}/templates`;
        const requestOptions = await this.client.prepareOptions(basePathUrl, 'GET', getParams, headers, body || undefined);
        const url = this.client.prepareUrl(requestOptions.hostname, requestOptions.queryParams);
        return this.client.processCall({
            url,
            requestOptions,
            apiName: this.apiName,
            operationId: 'V2ListTemplates',
        });
    }
    /**
     * List translations for a template
     *
     * @param { V2ListTranslationsRequestData } data - The data to provide to the API call.
     */
    async listTranslations(data) {
        this.client = this.getSinchClient();
        const getParams = this.client.extractQueryParams(data, ['language_code', 'translation_version']);
        const headers = {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
        };
        const body = '';
        const basePathUrl = `${this.client.apiClientOptions.hostname}/v2/projects/${this.client.apiClientOptions.projectId}/templates/${data['template_id']}/translations`;
        const requestOptions = await this.client.prepareOptions(basePathUrl, 'GET', getParams, headers, body || undefined);
        const url = this.client.prepareUrl(requestOptions.hostname, requestOptions.queryParams);
        return this.client.processCall({
            url,
            requestOptions,
            apiName: this.apiName,
            operationId: 'V2ListTranslations',
        });
    }
    /**
     * Updates a template.
     *
     * @param { V2UpdateTemplateRequestData } data - The data to provide to the API call.
     */
    async update(data) {
        this.client = this.getSinchClient();
        const getParams = this.client.extractQueryParams(data, []);
        const headers = {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
        };
        const body = data['updateTemplateRequestBody'] ? JSON.stringify(data['updateTemplateRequestBody']) : '{}';
        const basePathUrl = `${this.client.apiClientOptions.hostname}/v2/projects/${this.client.apiClientOptions.projectId}/templates/${data['template_id']}`;
        const requestOptions = await this.client.prepareOptions(basePathUrl, 'PUT', getParams, headers, body || undefined);
        const url = this.client.prepareUrl(requestOptions.hostname, requestOptions.queryParams);
        return this.client.processCall({
            url,
            requestOptions,
            apiName: this.apiName,
            operationId: 'V2UpdateTemplate',
        });
    }
}
exports.TemplatesV2Api = TemplatesV2Api;
//# sourceMappingURL=templates-v2-api.js.map